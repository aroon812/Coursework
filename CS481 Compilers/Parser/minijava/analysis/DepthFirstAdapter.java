/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import java.util.*;
import minijava.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        {
            List<PClassDecl> copy = new ArrayList<PClassDecl>(node.getRest());
            for(PClassDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAMainClass(AMainClass node)
    {
        defaultIn(node);
    }

    public void outAMainClass(AMainClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainClass(AMainClass node)
    {
        inAMainClass(node);
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        if(node.getCname() != null)
        {
            node.getCname().apply(this);
        }
        if(node.getOl() != null)
        {
            node.getOl().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAMainClass(node);
    }

    public void inAArray(AArray node)
    {
        defaultIn(node);
    }

    public void outAArray(AArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        inAArray(node);
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        outAArray(node);
    }

    public void inABaseDeclClassDecl(ABaseDeclClassDecl node)
    {
        defaultIn(node);
    }

    public void outABaseDeclClassDecl(ABaseDeclClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseDeclClassDecl(ABaseDeclClassDecl node)
    {
        inABaseDeclClassDecl(node);
        if(node.getBaseDecl() != null)
        {
            node.getBaseDecl().apply(this);
        }
        outABaseDeclClassDecl(node);
    }

    public void inAExtendsDeclClassDecl(AExtendsDeclClassDecl node)
    {
        defaultIn(node);
    }

    public void outAExtendsDeclClassDecl(AExtendsDeclClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsDeclClassDecl(AExtendsDeclClassDecl node)
    {
        inAExtendsDeclClassDecl(node);
        if(node.getExtendsDecl() != null)
        {
            node.getExtendsDecl().apply(this);
        }
        outAExtendsDeclClassDecl(node);
    }

    public void inABaseDecl(ABaseDecl node)
    {
        defaultIn(node);
    }

    public void outABaseDecl(ABaseDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseDecl(ABaseDecl node)
    {
        inABaseDecl(node);
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVars());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethods());
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outABaseDecl(node);
    }

    public void inAExtendsDecl(AExtendsDecl node)
    {
        defaultIn(node);
    }

    public void outAExtendsDecl(AExtendsDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsDecl(AExtendsDecl node)
    {
        inAExtendsDecl(node);
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        if(node.getName1() != null)
        {
            node.getName1().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVars());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethods());
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outAExtendsDecl(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getKind() != null)
        {
            node.getKind().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt0() != null)
        {
            node.getInt0().apply(this);
        }
        outAIntType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntarrayType(AIntarrayType node)
    {
        defaultIn(node);
    }

    public void outAIntarrayType(AIntarrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntarrayType(AIntarrayType node)
    {
        inAIntarrayType(node);
        if(node.getInt1() != null)
        {
            node.getInt1().apply(this);
        }
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        outAIntarrayType(node);
    }

    public void inAObjectType(AObjectType node)
    {
        defaultIn(node);
    }

    public void outAObjectType(AObjectType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectType(AObjectType node)
    {
        inAObjectType(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAObjectType(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getRet() != null)
        {
            node.getRet().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVars());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmts());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAFormalList(AFormalList node)
    {
        defaultIn(node);
    }

    public void outAFormalList(AFormalList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalList(AFormalList node)
    {
        inAFormalList(node);
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        {
            List<PFormalsTail> copy = new ArrayList<PFormalsTail>(node.getT());
            for(PFormalsTail e : copy)
            {
                e.apply(this);
            }
        }
        outAFormalList(node);
    }

    public void inAFormalsTail(AFormalsTail node)
    {
        defaultIn(node);
    }

    public void outAFormalsTail(AFormalsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormalsTail(AFormalsTail node)
    {
        inAFormalsTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAFormalsTail(node);
    }

    public void inAFormal(AFormal node)
    {
        defaultIn(node);
    }

    public void outAFormal(AFormal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormal(AFormal node)
    {
        inAFormal(node);
        if(node.getKind() != null)
        {
            node.getKind().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAFormal(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        outABlockStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getT() != null)
        {
            node.getT().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAPrintStmt(APrintStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintStmt(APrintStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStmt(APrintStmt node)
    {
        inAPrintStmt(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAPrintStmt(node);
    }

    public void inAAsmtStmt(AAsmtStmt node)
    {
        defaultIn(node);
    }

    public void outAAsmtStmt(AAsmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsmtStmt(AAsmtStmt node)
    {
        inAAsmtStmt(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getAsmt() != null)
        {
            node.getAsmt().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAsmtStmt(node);
    }

    public void inAArrayAsmtStmt(AArrayAsmtStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayAsmtStmt(AArrayAsmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAsmtStmt(AArrayAsmtStmt node)
    {
        inAArrayAsmtStmt(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getIdx() != null)
        {
            node.getIdx().apply(this);
        }
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getAsmt() != null)
        {
            node.getAsmt().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAArrayAsmtStmt(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getS());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outABlock(node);
    }

    public void inATrueBool(ATrueBool node)
    {
        defaultIn(node);
    }

    public void outATrueBool(ATrueBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBool(ATrueBool node)
    {
        inATrueBool(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBool(node);
    }

    public void inAFalseBool(AFalseBool node)
    {
        defaultIn(node);
    }

    public void outAFalseBool(AFalseBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBool(AFalseBool node)
    {
        inAFalseBool(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBool(node);
    }

    public void inATailExplist(ATailExplist node)
    {
        defaultIn(node);
    }

    public void outATailExplist(ATailExplist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATailExplist(ATailExplist node)
    {
        inATailExplist(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExps() != null)
        {
            node.getExps().apply(this);
        }
        outATailExplist(node);
    }

    public void inAHeadExplist(AHeadExplist node)
    {
        defaultIn(node);
    }

    public void outAHeadExplist(AHeadExplist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeadExplist(AHeadExplist node)
    {
        inAHeadExplist(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAHeadExplist(node);
    }

    public void inAEmptyExplist(AEmptyExplist node)
    {
        defaultIn(node);
    }

    public void outAEmptyExplist(AEmptyExplist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExplist(AEmptyExplist node)
    {
        inAEmptyExplist(node);
        outAEmptyExplist(node);
    }

    public void inADotopFunction(ADotopFunction node)
    {
        defaultIn(node);
    }

    public void outADotopFunction(ADotopFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotopFunction(ADotopFunction node)
    {
        inADotopFunction(node);
        if(node.getBracdot() != null)
        {
            node.getBracdot().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExplist() != null)
        {
            node.getExplist().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outADotopFunction(node);
    }

    public void inALengthFunction(ALengthFunction node)
    {
        defaultIn(node);
    }

    public void outALengthFunction(ALengthFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALengthFunction(ALengthFunction node)
    {
        inALengthFunction(node);
        if(node.getBracdot() != null)
        {
            node.getBracdot().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outALengthFunction(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLessthan() != null)
        {
            node.getLessthan().apply(this);
        }
        outAAndExp(node);
    }

    public void inANotandExp(ANotandExp node)
    {
        defaultIn(node);
    }

    public void outANotandExp(ANotandExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotandExp(ANotandExp node)
    {
        inANotandExp(node);
        if(node.getLessthan() != null)
        {
            node.getLessthan().apply(this);
        }
        outANotandExp(node);
    }

    public void inALessthanLessthan(ALessthanLessthan node)
    {
        defaultIn(node);
    }

    public void outALessthanLessthan(ALessthanLessthan node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessthanLessthan(ALessthanLessthan node)
    {
        inALessthanLessthan(node);
        if(node.getLessthan() != null)
        {
            node.getLessthan().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getMinusplus() != null)
        {
            node.getMinusplus().apply(this);
        }
        outALessthanLessthan(node);
    }

    public void inANotlessthanLessthan(ANotlessthanLessthan node)
    {
        defaultIn(node);
    }

    public void outANotlessthanLessthan(ANotlessthanLessthan node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotlessthanLessthan(ANotlessthanLessthan node)
    {
        inANotlessthanLessthan(node);
        if(node.getMinusplus() != null)
        {
            node.getMinusplus().apply(this);
        }
        outANotlessthanLessthan(node);
    }

    public void inAMinusMinusplus(AMinusMinusplus node)
    {
        defaultIn(node);
    }

    public void outAMinusMinusplus(AMinusMinusplus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusMinusplus(AMinusMinusplus node)
    {
        inAMinusMinusplus(node);
        if(node.getMinusplus() != null)
        {
            node.getMinusplus().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMinusMinusplus(node);
    }

    public void inAPlusMinusplus(APlusMinusplus node)
    {
        defaultIn(node);
    }

    public void outAPlusMinusplus(APlusMinusplus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusMinusplus(APlusMinusplus node)
    {
        inAPlusMinusplus(node);
        if(node.getMinusplus() != null)
        {
            node.getMinusplus().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAPlusMinusplus(node);
    }

    public void inAMinusplusMinusplus(AMinusplusMinusplus node)
    {
        defaultIn(node);
    }

    public void outAMinusplusMinusplus(AMinusplusMinusplus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusplusMinusplus(AMinusplusMinusplus node)
    {
        inAMinusplusMinusplus(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMinusplusMinusplus(node);
    }

    public void inAMultMult(AMultMult node)
    {
        defaultIn(node);
    }

    public void outAMultMult(AMultMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMult(AMultMult node)
    {
        inAMultMult(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getNotexp() != null)
        {
            node.getNotexp().apply(this);
        }
        outAMultMult(node);
    }

    public void inAMult1Mult(AMult1Mult node)
    {
        defaultIn(node);
    }

    public void outAMult1Mult(AMult1Mult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMult1Mult(AMult1Mult node)
    {
        inAMult1Mult(node);
        if(node.getNotexp() != null)
        {
            node.getNotexp().apply(this);
        }
        outAMult1Mult(node);
    }

    public void inANotNotexp(ANotNotexp node)
    {
        defaultIn(node);
    }

    public void outANotNotexp(ANotNotexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNotexp(ANotNotexp node)
    {
        inANotNotexp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getNotexp() != null)
        {
            node.getNotexp().apply(this);
        }
        outANotNotexp(node);
    }

    public void inANot1Notexp(ANot1Notexp node)
    {
        defaultIn(node);
    }

    public void outANot1Notexp(ANot1Notexp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANot1Notexp(ANot1Notexp node)
    {
        inANot1Notexp(node);
        if(node.getBracdot() != null)
        {
            node.getBracdot().apply(this);
        }
        outANot1Notexp(node);
    }

    public void inALiteralBracdot(ALiteralBracdot node)
    {
        defaultIn(node);
    }

    public void outALiteralBracdot(ALiteralBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralBracdot(ALiteralBracdot node)
    {
        inALiteralBracdot(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralBracdot(node);
    }

    public void inAThisBracdot(AThisBracdot node)
    {
        defaultIn(node);
    }

    public void outAThisBracdot(AThisBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisBracdot(AThisBracdot node)
    {
        inAThisBracdot(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisBracdot(node);
    }

    public void inAArrayindexBracdot(AArrayindexBracdot node)
    {
        defaultIn(node);
    }

    public void outAArrayindexBracdot(AArrayindexBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayindexBracdot(AArrayindexBracdot node)
    {
        inAArrayindexBracdot(node);
        if(node.getBracdot() != null)
        {
            node.getBracdot().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        outAArrayindexBracdot(node);
    }

    public void inAFunctionBracdot(AFunctionBracdot node)
    {
        defaultIn(node);
    }

    public void outAFunctionBracdot(AFunctionBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBracdot(AFunctionBracdot node)
    {
        inAFunctionBracdot(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionBracdot(node);
    }

    public void inAArraydeclBracdot(AArraydeclBracdot node)
    {
        defaultIn(node);
    }

    public void outAArraydeclBracdot(AArraydeclBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraydeclBracdot(AArraydeclBracdot node)
    {
        inAArraydeclBracdot(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        outAArraydeclBracdot(node);
    }

    public void inAObjectdeclBracdot(AObjectdeclBracdot node)
    {
        defaultIn(node);
    }

    public void outAObjectdeclBracdot(AObjectdeclBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectdeclBracdot(AObjectdeclBracdot node)
    {
        inAObjectdeclBracdot(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExplist() != null)
        {
            node.getExplist().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAObjectdeclBracdot(node);
    }

    public void inAParensBracdot(AParensBracdot node)
    {
        defaultIn(node);
    }

    public void outAParensBracdot(AParensBracdot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParensBracdot(AParensBracdot node)
    {
        inAParensBracdot(node);
        if(node.getParens() != null)
        {
            node.getParens().apply(this);
        }
        outAParensBracdot(node);
    }

    public void inAParensParens(AParensParens node)
    {
        defaultIn(node);
    }

    public void outAParensParens(AParensParens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParensParens(AParensParens node)
    {
        inAParensParens(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAParensParens(node);
    }

    public void inAIdLiteral(AIdLiteral node)
    {
        defaultIn(node);
    }

    public void outAIdLiteral(AIdLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLiteral(AIdLiteral node)
    {
        inAIdLiteral(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdLiteral(node);
    }

    public void inANumLiteral(ANumLiteral node)
    {
        defaultIn(node);
    }

    public void outANumLiteral(ANumLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumLiteral(ANumLiteral node)
    {
        inANumLiteral(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumLiteral(node);
    }

    public void inABoolLiteral(ABoolLiteral node)
    {
        defaultIn(node);
    }

    public void outABoolLiteral(ABoolLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolLiteral(ABoolLiteral node)
    {
        inABoolLiteral(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolLiteral(node);
    }
}
