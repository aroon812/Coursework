/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ALessthanLessthan extends PLessthan
{
    private PLessthan _lessthan_;
    private TLt _lt_;
    private PMinusplus _minusplus_;

    public ALessthanLessthan()
    {
        // Constructor
    }

    public ALessthanLessthan(
        @SuppressWarnings("hiding") PLessthan _lessthan_,
        @SuppressWarnings("hiding") TLt _lt_,
        @SuppressWarnings("hiding") PMinusplus _minusplus_)
    {
        // Constructor
        setLessthan(_lessthan_);

        setLt(_lt_);

        setMinusplus(_minusplus_);

    }

    @Override
    public Object clone()
    {
        return new ALessthanLessthan(
            cloneNode(this._lessthan_),
            cloneNode(this._lt_),
            cloneNode(this._minusplus_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessthanLessthan(this);
    }

    public PLessthan getLessthan()
    {
        return this._lessthan_;
    }

    public void setLessthan(PLessthan node)
    {
        if(this._lessthan_ != null)
        {
            this._lessthan_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessthan_ = node;
    }

    public TLt getLt()
    {
        return this._lt_;
    }

    public void setLt(TLt node)
    {
        if(this._lt_ != null)
        {
            this._lt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lt_ = node;
    }

    public PMinusplus getMinusplus()
    {
        return this._minusplus_;
    }

    public void setMinusplus(PMinusplus node)
    {
        if(this._minusplus_ != null)
        {
            this._minusplus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minusplus_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lessthan_)
            + toString(this._lt_)
            + toString(this._minusplus_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lessthan_ == child)
        {
            this._lessthan_ = null;
            return;
        }

        if(this._lt_ == child)
        {
            this._lt_ = null;
            return;
        }

        if(this._minusplus_ == child)
        {
            this._minusplus_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lessthan_ == oldChild)
        {
            setLessthan((PLessthan) newChild);
            return;
        }

        if(this._lt_ == oldChild)
        {
            setLt((TLt) newChild);
            return;
        }

        if(this._minusplus_ == oldChild)
        {
            setMinusplus((PMinusplus) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
