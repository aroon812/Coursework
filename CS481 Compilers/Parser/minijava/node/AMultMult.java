/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AMultMult extends PMult
{
    private PMult _mult_;
    private TStar _star_;
    private PNotexp _notexp_;

    public AMultMult()
    {
        // Constructor
    }

    public AMultMult(
        @SuppressWarnings("hiding") PMult _mult_,
        @SuppressWarnings("hiding") TStar _star_,
        @SuppressWarnings("hiding") PNotexp _notexp_)
    {
        // Constructor
        setMult(_mult_);

        setStar(_star_);

        setNotexp(_notexp_);

    }

    @Override
    public Object clone()
    {
        return new AMultMult(
            cloneNode(this._mult_),
            cloneNode(this._star_),
            cloneNode(this._notexp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultMult(this);
    }

    public PMult getMult()
    {
        return this._mult_;
    }

    public void setMult(PMult node)
    {
        if(this._mult_ != null)
        {
            this._mult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mult_ = node;
    }

    public TStar getStar()
    {
        return this._star_;
    }

    public void setStar(TStar node)
    {
        if(this._star_ != null)
        {
            this._star_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._star_ = node;
    }

    public PNotexp getNotexp()
    {
        return this._notexp_;
    }

    public void setNotexp(PNotexp node)
    {
        if(this._notexp_ != null)
        {
            this._notexp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notexp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mult_)
            + toString(this._star_)
            + toString(this._notexp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mult_ == child)
        {
            this._mult_ = null;
            return;
        }

        if(this._star_ == child)
        {
            this._star_ = null;
            return;
        }

        if(this._notexp_ == child)
        {
            this._notexp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mult_ == oldChild)
        {
            setMult((PMult) newChild);
            return;
        }

        if(this._star_ == oldChild)
        {
            setStar((TStar) newChild);
            return;
        }

        if(this._notexp_ == oldChild)
        {
            setNotexp((PNotexp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
