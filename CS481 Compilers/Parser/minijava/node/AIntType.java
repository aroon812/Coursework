/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AIntType extends PType
{
    private TInt _int0_;

    public AIntType()
    {
        // Constructor
    }

    public AIntType(
        @SuppressWarnings("hiding") TInt _int0_)
    {
        // Constructor
        setInt0(_int0_);

    }

    @Override
    public Object clone()
    {
        return new AIntType(
            cloneNode(this._int0_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIntType(this);
    }

    public TInt getInt0()
    {
        return this._int0_;
    }

    public void setInt0(TInt node)
    {
        if(this._int0_ != null)
        {
            this._int0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int0_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._int0_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._int0_ == child)
        {
            this._int0_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._int0_ == oldChild)
        {
            setInt0((TInt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
