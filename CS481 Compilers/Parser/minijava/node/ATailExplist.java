/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ATailExplist extends PExplist
{
    private PExp _exp_;
    private TComma _comma_;
    private PExplist _exps_;

    public ATailExplist()
    {
        // Constructor
    }

    public ATailExplist(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PExplist _exps_)
    {
        // Constructor
        setExp(_exp_);

        setComma(_comma_);

        setExps(_exps_);

    }

    @Override
    public Object clone()
    {
        return new ATailExplist(
            cloneNode(this._exp_),
            cloneNode(this._comma_),
            cloneNode(this._exps_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATailExplist(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PExplist getExps()
    {
        return this._exps_;
    }

    public void setExps(PExplist node)
    {
        if(this._exps_ != null)
        {
            this._exps_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exps_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._comma_)
            + toString(this._exps_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._exps_ == child)
        {
            this._exps_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._exps_ == oldChild)
        {
            setExps((PExplist) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
