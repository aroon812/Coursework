/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.parser;

import minijava.lexer.*;
import minijava.node.*;
import minijava.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AMainClass */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AArray */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ABaseDeclClassDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AExtendsDeclClassDecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AAbasedecl1BaseDecl */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AAbasedecl2BaseDecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AAbasedecl3BaseDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AAbasedecl4BaseDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AAextendsdecl1ExtendsDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AAextendsdecl2ExtendsDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AAextendsdecl3ExtendsDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AAextendsdecl4ExtendsDecl */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AVarDecl */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AIntType */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AIntarrayType */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce AAobjecttype1Type */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce AAobjecttype2Type */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AAmethoddecl1MethodDecl */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAmethoddecl2MethodDecl */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AAmethoddecl3MethodDecl */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AAmethoddecl4MethodDecl */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AAmethoddecl5MethodDecl */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AAmethoddecl6MethodDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AAmethoddecl7MethodDecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce AAmethoddecl8MethodDecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce AAformallist1FormalList */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce AAformallist2FormalList */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce AFormalsTail */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce AFormal */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce ABlockStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce AIfStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce AWhileStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce APrintStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce AAsmtStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AArrayAsmtStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list, false);
            }
            break;
            case 38: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, false);
            }
            break;
            case 39: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list, false);
            }
            break;
            case 40: /* reduce ATrueBool */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AFalseBool */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list, false);
            }
            break;
            case 42: /* reduce ATailExplist */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce AHeadExplist */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce AEmptyExplist */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list, false);
            }
            break;
            case 45: /* reduce ADotopFunction */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list, false);
            }
            break;
            case 46: /* reduce ALengthFunction */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list, false);
            }
            break;
            case 47: /* reduce AAndExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list, false);
            }
            break;
            case 48: /* reduce ANotandExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, false);
            }
            break;
            case 49: /* reduce ALessthanLessthan */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce ANotlessthanLessthan */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list, false);
            }
            break;
            case 51: /* reduce AMinusMinusplus */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce APlusMinusplus */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce AMinusplusMinusplus */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, false);
            }
            break;
            case 54: /* reduce AMultMult */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce AMult1Mult */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce ANotNotexp */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
            case 57: /* reduce ANot1Notexp */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce ALiteralBracdot */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list, false);
            }
            break;
            case 59: /* reduce AThisBracdot */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, false);
            }
            break;
            case 60: /* reduce AArrayindexBracdot */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list, false);
            }
            break;
            case 61: /* reduce AFunctionBracdot */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list, false);
            }
            break;
            case 62: /* reduce AArraydeclBracdot */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list, false);
            }
            break;
            case 63: /* reduce AObjectdeclBracdot */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list, false);
            }
            break;
            case 64: /* reduce AParensBracdot */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list, false);
            }
            break;
            case 65: /* reduce AParensParens */
            {
                ArrayList<Object> list = new65();
                push(goTo(23), list, false);
            }
            break;
            case 66: /* reduce AIdLiteral */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list, false);
            }
            break;
            case 67: /* reduce ANumLiteral */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list, false);
            }
            break;
            case 68: /* reduce ABoolLiteral */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list, false);
            }
            break;
            case 69: /* reduce ATerminal$ClassDecl */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$ClassDecl */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list, true);
            }
            break;
            case 71: /* reduce ATerminal$VarDecl */
            {
                ArrayList<Object> list = new71();
                push(goTo(26), list, true);
            }
            break;
            case 72: /* reduce ANonTerminal$VarDecl */
            {
                ArrayList<Object> list = new72();
                push(goTo(26), list, true);
            }
            break;
            case 73: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list, true);
            }
            break;
            case 74: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new74();
                push(goTo(27), list, true);
            }
            break;
            case 75: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new75();
                push(goTo(28), list, true);
            }
            break;
            case 76: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new76();
                push(goTo(28), list, true);
            }
            break;
            case 77: /* reduce ATerminal$FormalsTail */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list, true);
            }
            break;
            case 78: /* reduce ANonTerminal$FormalsTail */
            {
                ArrayList<Object> list = new78();
                push(goTo(29), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMainClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMainClass pmainclassNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        TPublic tpublicNode5;
        TStatic tstaticNode6;
        TVoid tvoidNode7;
        TMain tmainNode8;
        TLparen tlparenNode9;
        TString tstringNode10;
        PArray parrayNode11;
        TId tidNode12;
        TRparen trparenNode13;
        TLbrace tlbraceNode14;
        PStmt pstmtNode15;
        TRbrace trbraceNode16;
        TRbrace trbraceNode17;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        tpublicNode5 = (TPublic)nodeArrayList4.get(0);
        tstaticNode6 = (TStatic)nodeArrayList5.get(0);
        tvoidNode7 = (TVoid)nodeArrayList6.get(0);
        tmainNode8 = (TMain)nodeArrayList7.get(0);
        tlparenNode9 = (TLparen)nodeArrayList8.get(0);
        tstringNode10 = (TString)nodeArrayList9.get(0);
        parrayNode11 = (PArray)nodeArrayList10.get(0);
        tidNode12 = (TId)nodeArrayList11.get(0);
        trparenNode13 = (TRparen)nodeArrayList12.get(0);
        tlbraceNode14 = (TLbrace)nodeArrayList13.get(0);
        pstmtNode15 = (PStmt)nodeArrayList14.get(0);
        trbraceNode16 = (TRbrace)nodeArrayList15.get(0);
        trbraceNode17 = (TRbrace)nodeArrayList16.get(0);

        pmainclassNode1 = new AMainClass(tclasNode2, tidNode3, tlbraceNode4, tpublicNode5, tstaticNode6, tvoidNode7, tmainNode8, tlparenNode9, tstringNode10, parrayNode11, tidNode12, trparenNode13, tlbraceNode14, pstmtNode15, trbraceNode16, trbraceNode17);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        TLbracket tlbracketNode2;
        TRbracket trbracketNode3;
        tlbracketNode2 = (TLbracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRbracket)nodeArrayList2.get(0);

        parrayNode1 = new AArray(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABaseDeclClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        PBaseDecl pbasedeclNode2;
        pbasedeclNode2 = (PBaseDecl)nodeArrayList1.get(0);

        pclassdeclNode1 = new ABaseDeclClassDecl(pbasedeclNode2);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AExtendsDeclClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        PExtendsDecl pextendsdeclNode2;
        pextendsdeclNode2 = (PExtendsDecl)nodeArrayList1.get(0);

        pclassdeclNode1 = new AExtendsDeclClassDecl(pextendsdeclNode2);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAbasedecl1BaseDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBaseDecl pbasedeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRbrace trbraceNode7;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trbraceNode7 = (TRbrace)nodeArrayList4.get(0);

        pbasedeclNode1 = new ABaseDecl(tclasNode2, tidNode3, tlbraceNode4, listNode5, listNode6, trbraceNode7);
        }
	nodeList.add(pbasedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAbasedecl2BaseDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBaseDecl pbasedeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRbrace trbraceNode8;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        trbraceNode8 = (TRbrace)nodeArrayList5.get(0);

        pbasedeclNode1 = new ABaseDecl(tclasNode2, tidNode3, tlbraceNode4, listNode6, listNode7, trbraceNode8);
        }
	nodeList.add(pbasedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAbasedecl3BaseDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBaseDecl pbasedeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRbrace trbraceNode8;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        trbraceNode8 = (TRbrace)nodeArrayList5.get(0);

        pbasedeclNode1 = new ABaseDecl(tclasNode2, tidNode3, tlbraceNode4, listNode5, listNode7, trbraceNode8);
        }
	nodeList.add(pbasedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAbasedecl4BaseDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBaseDecl pbasedeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TRbrace trbraceNode9;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode9 = (TRbrace)nodeArrayList6.get(0);

        pbasedeclNode1 = new ABaseDecl(tclasNode2, tidNode3, tlbraceNode4, listNode6, listNode8, trbraceNode9);
        }
	nodeList.add(pbasedeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAextendsdecl1ExtendsDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendsDecl pextendsdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLbrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TRbrace trbraceNode9;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLbrace)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trbraceNode9 = (TRbrace)nodeArrayList6.get(0);

        pextendsdeclNode1 = new AExtendsDecl(tclasNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode7, listNode8, trbraceNode9);
        }
	nodeList.add(pextendsdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAextendsdecl2ExtendsDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendsDecl pextendsdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLbrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TRbrace trbraceNode10;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLbrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        trbraceNode10 = (TRbrace)nodeArrayList7.get(0);

        pextendsdeclNode1 = new AExtendsDecl(tclasNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode8, listNode9, trbraceNode10);
        }
	nodeList.add(pextendsdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAextendsdecl3ExtendsDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendsDecl pextendsdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLbrace tlbraceNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TRbrace trbraceNode10;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLbrace)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        trbraceNode10 = (TRbrace)nodeArrayList7.get(0);

        pextendsdeclNode1 = new AExtendsDecl(tclasNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode7, listNode9, trbraceNode10);
        }
	nodeList.add(pextendsdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAextendsdecl4ExtendsDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendsDecl pextendsdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TExtends textendsNode4;
        TId tidNode5;
        TLbrace tlbraceNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TRbrace trbraceNode11;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        textendsNode4 = (TExtends)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tlbraceNode6 = (TLbrace)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        trbraceNode11 = (TRbrace)nodeArrayList8.get(0);

        pextendsdeclNode1 = new AExtendsDecl(tclasNode2, tidNode3, textendsNode4, tidNode5, tlbraceNode6, listNode8, listNode10, trbraceNode11);
        }
	nodeList.add(pextendsdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TSemi tsemiNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3, tsemiNode4);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIntarrayType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        PArray parrayNode3;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        parrayNode3 = (PArray)nodeArrayList2.get(0);

        ptypeNode1 = new AIntarrayType(tintNode2, parrayNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAobjecttype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        tidNode3 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AObjectType(null, tidNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAobjecttype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TNew tnewNode2;
        TId tidNode3;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        ptypeNode1 = new AObjectType(tnewNode2, tidNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAmethoddecl1MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TReturn treturnNode11;
        PExp pexpNode12;
        TSemi tsemiNode13;
        TRbrace trbraceNode14;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        trparenNode7 = (TRparen)nodeArrayList5.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList6.get(0);
        {
            // Block
        }
        {
            // Block
        }
        treturnNode11 = (TReturn)nodeArrayList7.get(0);
        pexpNode12 = (PExp)nodeArrayList8.get(0);
        tsemiNode13 = (TSemi)nodeArrayList9.get(0);
        trbraceNode14 = (TRbrace)nodeArrayList10.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, null, trparenNode7, tlbraceNode8, listNode9, listNode10, treturnNode11, pexpNode12, tsemiNode13, trbraceNode14);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAmethoddecl2MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PFormalList pformallistNode6;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TReturn treturnNode11;
        PExp pexpNode12;
        TSemi tsemiNode13;
        TRbrace trbraceNode14;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pformallistNode6 = (PFormalList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList7.get(0);
        {
            // Block
        }
        {
            // Block
        }
        treturnNode11 = (TReturn)nodeArrayList8.get(0);
        pexpNode12 = (PExp)nodeArrayList9.get(0);
        tsemiNode13 = (TSemi)nodeArrayList10.get(0);
        trbraceNode14 = (TRbrace)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, pformallistNode6, trparenNode7, tlbraceNode8, listNode9, listNode10, treturnNode11, pexpNode12, tsemiNode13, trbraceNode14);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAmethoddecl3MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSemi tsemiNode14;
        TRbrace trbraceNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        trparenNode7 = (TRparen)nodeArrayList5.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }
        treturnNode12 = (TReturn)nodeArrayList8.get(0);
        pexpNode13 = (PExp)nodeArrayList9.get(0);
        tsemiNode14 = (TSemi)nodeArrayList10.get(0);
        trbraceNode15 = (TRbrace)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, null, trparenNode7, tlbraceNode8, listNode10, listNode11, treturnNode12, pexpNode13, tsemiNode14, trbraceNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAmethoddecl4MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PFormalList pformallistNode6;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSemi tsemiNode14;
        TRbrace trbraceNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pformallistNode6 = (PFormalList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }
        treturnNode12 = (TReturn)nodeArrayList9.get(0);
        pexpNode13 = (PExp)nodeArrayList10.get(0);
        tsemiNode14 = (TSemi)nodeArrayList11.get(0);
        trbraceNode15 = (TRbrace)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, pformallistNode6, trparenNode7, tlbraceNode8, listNode10, listNode11, treturnNode12, pexpNode13, tsemiNode14, trbraceNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAmethoddecl5MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSemi tsemiNode14;
        TRbrace trbraceNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        trparenNode7 = (TRparen)nodeArrayList5.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList6.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList7.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        treturnNode12 = (TReturn)nodeArrayList8.get(0);
        pexpNode13 = (PExp)nodeArrayList9.get(0);
        tsemiNode14 = (TSemi)nodeArrayList10.get(0);
        trbraceNode15 = (TRbrace)nodeArrayList11.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, null, trparenNode7, tlbraceNode8, listNode9, listNode11, treturnNode12, pexpNode13, tsemiNode14, trbraceNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAmethoddecl6MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PFormalList pformallistNode6;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        TReturn treturnNode12;
        PExp pexpNode13;
        TSemi tsemiNode14;
        TRbrace trbraceNode15;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pformallistNode6 = (PFormalList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList7.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        listNode10 = (LinkedList)nodeArrayList8.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        treturnNode12 = (TReturn)nodeArrayList9.get(0);
        pexpNode13 = (PExp)nodeArrayList10.get(0);
        tsemiNode14 = (TSemi)nodeArrayList11.get(0);
        trbraceNode15 = (TRbrace)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, pformallistNode6, trparenNode7, tlbraceNode8, listNode9, listNode11, treturnNode12, pexpNode13, tsemiNode14, trbraceNode15);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAmethoddecl7MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TReturn treturnNode13;
        PExp pexpNode14;
        TSemi tsemiNode15;
        TRbrace trbraceNode16;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        trparenNode7 = (TRparen)nodeArrayList5.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList8.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        treturnNode13 = (TReturn)nodeArrayList9.get(0);
        pexpNode14 = (PExp)nodeArrayList10.get(0);
        tsemiNode15 = (TSemi)nodeArrayList11.get(0);
        trbraceNode16 = (TRbrace)nodeArrayList12.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, null, trparenNode7, tlbraceNode8, listNode10, listNode12, treturnNode13, pexpNode14, tsemiNode15, trbraceNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAmethoddecl8MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PFormalList pformallistNode6;
        TRparen trparenNode7;
        TLbrace tlbraceNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TReturn treturnNode13;
        PExp pexpNode14;
        TSemi tsemiNode15;
        TRbrace trbraceNode16;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pformallistNode6 = (PFormalList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        tlbraceNode8 = (TLbrace)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList9.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        treturnNode13 = (TReturn)nodeArrayList10.get(0);
        pexpNode14 = (PExp)nodeArrayList11.get(0);
        tsemiNode15 = (TSemi)nodeArrayList12.get(0);
        trbraceNode16 = (TRbrace)nodeArrayList13.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, pformallistNode6, trparenNode7, tlbraceNode8, listNode10, listNode12, treturnNode13, pexpNode14, tsemiNode15, trbraceNode16);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAformallist1FormalList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalList pformallistNode1;
        {
            // Block
        PFormal pformalNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pformalNode2 = (PFormal)nodeArrayList1.get(0);
        {
            // Block
        }

        pformallistNode1 = new AFormalList(pformalNode2, listNode3);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAformallist2FormalList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalList pformallistNode1;
        {
            // Block
        PFormal pformalNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pformalNode2 = (PFormal)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pformallistNode1 = new AFormalList(pformalNode2, listNode4);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AFormalsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalsTail pformalstailNode1;
        {
            // Block
        TComma tcommaNode2;
        PFormal pformalNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pformalNode3 = (PFormal)nodeArrayList2.get(0);

        pformalstailNode1 = new AFormalsTail(tcommaNode2, pformalNode3);
        }
	nodeList.add(pformalstailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AFormal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormal pformalNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtNode1 = new ABlockStmt(pblockNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStmt pstmtNode6;
        TElse telseNode7;
        PStmt pstmtNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstmtNode6 = (PStmt)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstmtNode8 = (PStmt)nodeArrayList7.get(0);

        pstmtNode1 = new AIfStmt(tifNode2, tlparenNode3, pexpNode4, trparenNode5, pstmtNode6, telseNode7, pstmtNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStmt pstmtNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstmtNode6 = (PStmt)nodeArrayList5.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, tlparenNode3, pexpNode4, trparenNode5, pstmtNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce APrintStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TPrint tprintNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        TSemi tsemiNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pstmtNode1 = new APrintStmt(tprintNode2, tlparenNode3, pexpNode4, trparenNode5, tsemiNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAsmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TAsmt tasmtNode3;
        PExp pexpNode4;
        TSemi tsemiNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tasmtNode3 = (TAsmt)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pstmtNode1 = new AAsmtStmt(tidNode2, tasmtNode3, pexpNode4, tsemiNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AArrayAsmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TLbracket tlbracketNode3;
        PExp pexpNode4;
        TRbracket trbracketNode5;
        TAsmt tasmtNode6;
        PExp pexpNode7;
        TSemi tsemiNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList4.get(0);
        tasmtNode6 = (TAsmt)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        tsemiNode8 = (TSemi)nodeArrayList7.get(0);

        pstmtNode1 = new AArrayAsmtStmt(tidNode2, tlbracketNode3, pexpNode4, trbracketNode5, tasmtNode6, pexpNode7, tsemiNode8);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRbrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRbrace trbraceNode5;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRbrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ATrueBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pboolNode1 = new ATrueBool(ttrueNode2);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFalseBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pboolNode1 = new AFalseBool(tfalseNode2);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ATailExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        TComma tcommaNode3;
        PExplist pexplistNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexplistNode4 = (PExplist)nodeArrayList3.get(0);

        pexplistNode1 = new ATailExplist(pexpNode2, tcommaNode3, pexplistNode4);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AHeadExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExplist pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexplistNode1 = new AHeadExplist(pexpNode2);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AEmptyExplist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExplist pexplistNode1;
        {
            // Block

        pexplistNode1 = new AEmptyExplist();
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADotopFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PBracdot pbracdotNode2;
        TDot tdotNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PExplist pexplistNode6;
        TRparen trparenNode7;
        pbracdotNode2 = (PBracdot)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pexplistNode6 = (PExplist)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);

        pfunctionNode1 = new ADotopFunction(pbracdotNode2, tdotNode3, tidNode4, tlparenNode5, pexplistNode6, trparenNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ALengthFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PBracdot pbracdotNode2;
        TDot tdotNode3;
        TLength tlengthNode4;
        pbracdotNode2 = (PBracdot)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tlengthNode4 = (TLength)nodeArrayList3.get(0);

        pfunctionNode1 = new ALengthFunction(pbracdotNode2, tdotNode3, tlengthNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TAnd tandNode3;
        PLessthan plessthanNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        plessthanNode4 = (PLessthan)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, tandNode3, plessthanNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ANotandExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PLessthan plessthanNode2;
        plessthanNode2 = (PLessthan)nodeArrayList1.get(0);

        pexpNode1 = new ANotandExp(plessthanNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ALessthanLessthan */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLessthan plessthanNode1;
        {
            // Block
        PLessthan plessthanNode2;
        TLt tltNode3;
        PMinusplus pminusplusNode4;
        plessthanNode2 = (PLessthan)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        pminusplusNode4 = (PMinusplus)nodeArrayList3.get(0);

        plessthanNode1 = new ALessthanLessthan(plessthanNode2, tltNode3, pminusplusNode4);
        }
	nodeList.add(plessthanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANotlessthanLessthan */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLessthan plessthanNode1;
        {
            // Block
        PMinusplus pminusplusNode2;
        pminusplusNode2 = (PMinusplus)nodeArrayList1.get(0);

        plessthanNode1 = new ANotlessthanLessthan(pminusplusNode2);
        }
	nodeList.add(plessthanNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMinusMinusplus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMinusplus pminusplusNode1;
        {
            // Block
        PMinusplus pminusplusNode2;
        TMinus tminusNode3;
        PMult pmultNode4;
        pminusplusNode2 = (PMinusplus)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultNode4 = (PMult)nodeArrayList3.get(0);

        pminusplusNode1 = new AMinusMinusplus(pminusplusNode2, tminusNode3, pmultNode4);
        }
	nodeList.add(pminusplusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce APlusMinusplus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMinusplus pminusplusNode1;
        {
            // Block
        PMinusplus pminusplusNode2;
        TPlus tplusNode3;
        PMult pmultNode4;
        pminusplusNode2 = (PMinusplus)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultNode4 = (PMult)nodeArrayList3.get(0);

        pminusplusNode1 = new APlusMinusplus(pminusplusNode2, tplusNode3, pmultNode4);
        }
	nodeList.add(pminusplusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMinusplusMinusplus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMinusplus pminusplusNode1;
        {
            // Block
        PMult pmultNode2;
        pmultNode2 = (PMult)nodeArrayList1.get(0);

        pminusplusNode1 = new AMinusplusMinusplus(pmultNode2);
        }
	nodeList.add(pminusplusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        PMult pmultNode2;
        TStar tstarNode3;
        PNotexp pnotexpNode4;
        pmultNode2 = (PMult)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pnotexpNode4 = (PNotexp)nodeArrayList3.get(0);

        pmultNode1 = new AMultMult(pmultNode2, tstarNode3, pnotexpNode4);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AMult1Mult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        PNotexp pnotexpNode2;
        pnotexpNode2 = (PNotexp)nodeArrayList1.get(0);

        pmultNode1 = new AMult1Mult(pnotexpNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANotNotexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNotexp pnotexpNode1;
        {
            // Block
        TNot tnotNode2;
        PNotexp pnotexpNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pnotexpNode3 = (PNotexp)nodeArrayList2.get(0);

        pnotexpNode1 = new ANotNotexp(tnotNode2, pnotexpNode3);
        }
	nodeList.add(pnotexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANot1Notexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNotexp pnotexpNode1;
        {
            // Block
        PBracdot pbracdotNode2;
        pbracdotNode2 = (PBracdot)nodeArrayList1.get(0);

        pnotexpNode1 = new ANot1Notexp(pbracdotNode2);
        }
	nodeList.add(pnotexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALiteralBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pbracdotNode1 = new ALiteralBracdot(pliteralNode2);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AThisBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pbracdotNode1 = new AThisBracdot(tthisNode2);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AArrayindexBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        PBracdot pbracdotNode2;
        TLbracket tlbracketNode3;
        PExp pexpNode4;
        TRbracket trbracketNode5;
        pbracdotNode2 = (PBracdot)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList4.get(0);

        pbracdotNode1 = new AArrayindexBracdot(pbracdotNode2, tlbracketNode3, pexpNode4, trbracketNode5);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AFunctionBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pbracdotNode1 = new AFunctionBracdot(pfunctionNode2);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AArraydeclBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        TNew tnewNode2;
        TInt tintNode3;
        TLbracket tlbracketNode4;
        PExp pexpNode5;
        TRbracket trbracketNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);
        tlbracketNode4 = (TLbracket)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        trbracketNode6 = (TRbracket)nodeArrayList5.get(0);

        pbracdotNode1 = new AArraydeclBracdot(tnewNode2, tintNode3, tlbracketNode4, pexpNode5, trbracketNode6);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AObjectdeclBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        TNew tnewNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        PExplist pexplistNode5;
        TRparen trparenNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        pexplistNode5 = (PExplist)nodeArrayList4.get(0);
        trparenNode6 = (TRparen)nodeArrayList5.get(0);

        pbracdotNode1 = new AObjectdeclBracdot(tnewNode2, tidNode3, tlparenNode4, pexplistNode5, trparenNode6);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AParensBracdot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBracdot pbracdotNode1;
        {
            // Block
        PParens pparensNode2;
        pparensNode2 = (PParens)nodeArrayList1.get(0);

        pbracdotNode1 = new AParensBracdot(pparensNode2);
        }
	nodeList.add(pbracdotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AParensParens */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParens pparensNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExp pexpNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pparensNode1 = new AParensParens(tlparenNode2, pexpNode3, trparenNode4);
        }
	nodeList.add(pparensNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AIdLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pliteralNode1 = new AIdLiteral(tidNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANumLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pliteralNode1 = new ANumLiteral(tnumNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ABoolLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PBool pboolNode2;
        pboolNode2 = (PBool)nodeArrayList1.get(0);

        pliteralNode1 = new ABoolLiteral(pboolNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDecl pvardeclNode1;
        pvardeclNode1 = (PVarDecl)nodeArrayList1.get(0);
	if(pvardeclNode1 != null)
	{
	  listNode2.add(pvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDecl pvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclNode2 = (PVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclNode2 != null)
	{
	  listNode3.add(pvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATerminal$FormalsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFormalsTail pformalstailNode1;
        pformalstailNode1 = (PFormalsTail)nodeArrayList1.get(0);
	if(pformalstailNode1 != null)
	{
	  listNode2.add(pformalstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANonTerminal$FormalsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFormalsTail pformalstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pformalstailNode2 = (PFormalsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pformalstailNode2 != null)
	{
	  listNode3.add(pformalstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {36, SHIFT, 4}, },
			{{-1, ERROR, 2}, {38, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {18, SHIFT, 5}, },
			{{-1, ERROR, 4}, {15, SHIFT, 10}, },
			{{-1, ERROR, 5}, {36, SHIFT, 11}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 1}, {18, SHIFT, 5}, },
			{{-1, ERROR, 10}, {27, SHIFT, 13}, },
			{{-1, ERROR, 11}, {15, SHIFT, 14}, {20, SHIFT, 15}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 13}, {29, SHIFT, 16}, },
			{{-1, ERROR, 14}, {16, SHIFT, 17}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {36, SHIFT, 22}, },
			{{-1, ERROR, 15}, {36, SHIFT, 28}, },
			{{-1, ERROR, 16}, {34, SHIFT, 29}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, {13, SHIFT, 30}, },
			{{-1, ERROR, 20}, {36, SHIFT, 32}, },
			{{-1, ERROR, 21}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {36, SHIFT, 22}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 24}, {36, SHIFT, 34}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 26}, {16, SHIFT, 35}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {36, SHIFT, 22}, },
			{{-1, ERROR, 27}, {16, SHIFT, 38}, {27, SHIFT, 21}, },
			{{-1, ERROR, 28}, {15, SHIFT, 40}, },
			{{-1, ERROR, 29}, {25, SHIFT, 41}, },
			{{-1, ERROR, 30}, {14, SHIFT, 42}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 33}, {36, SHIFT, 43}, },
			{{-1, ERROR, 34}, {9, SHIFT, 44}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 37}, {16, SHIFT, 45}, {27, SHIFT, 21}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 40}, {16, SHIFT, 46}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {36, SHIFT, 22}, },
			{{-1, ERROR, 41}, {11, SHIFT, 49}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 43}, {11, SHIFT, 50}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 47}, {16, SHIFT, 51}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 21}, {36, SHIFT, 22}, },
			{{-1, ERROR, 48}, {16, SHIFT, 53}, {27, SHIFT, 21}, },
			{{-1, ERROR, 49}, {30, SHIFT, 54}, },
			{{-1, ERROR, 50}, {12, SHIFT, 55}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {36, SHIFT, 22}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 52}, {16, SHIFT, 59}, {27, SHIFT, 21}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 54}, {13, SHIFT, 30}, },
			{{-1, ERROR, 55}, {15, SHIFT, 61}, },
			{{-1, ERROR, 56}, {36, SHIFT, 62}, },
			{{-1, ERROR, 57}, {12, SHIFT, 63}, },
			{{-1, REDUCE, 28}, {8, SHIFT, 64}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 60}, {36, SHIFT, 67}, },
			{{-1, ERROR, 61}, {15, SHIFT, 68}, {17, SHIFT, 18}, {22, SHIFT, 69}, {23, SHIFT, 19}, {26, SHIFT, 20}, {28, SHIFT, 70}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 73}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 63}, {15, SHIFT, 78}, },
			{{-1, ERROR, 64}, {17, SHIFT, 18}, {23, SHIFT, 19}, {26, SHIFT, 20}, {36, SHIFT, 22}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 29}, {8, SHIFT, 64}, },
			{{-1, ERROR, 67}, {12, SHIFT, 81}, },
			{{-1, ERROR, 68}, {15, SHIFT, 68}, {16, SHIFT, 82}, {22, SHIFT, 69}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, ERROR, 69}, {11, SHIFT, 85}, },
			{{-1, ERROR, 70}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 71}, {11, SHIFT, 104}, },
			{{-1, ERROR, 72}, {11, SHIFT, 105}, },
			{{-1, REDUCE, 18}, {6, SHIFT, 106}, {13, SHIFT, 107}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 76}, {15, SHIFT, 68}, {17, SHIFT, 18}, {22, SHIFT, 69}, {23, SHIFT, 19}, {26, SHIFT, 20}, {28, SHIFT, 108}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 73}, },
			{{-1, ERROR, 77}, {15, SHIFT, 68}, {22, SHIFT, 69}, {28, SHIFT, 110}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, ERROR, 78}, {15, SHIFT, 68}, {17, SHIFT, 18}, {22, SHIFT, 69}, {23, SHIFT, 19}, {26, SHIFT, 20}, {28, SHIFT, 112}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 73}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 81}, {15, SHIFT, 115}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 83}, {6, SHIFT, 106}, {13, SHIFT, 107}, },
			{{-1, ERROR, 84}, {15, SHIFT, 68}, {16, SHIFT, 116}, {22, SHIFT, 69}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, ERROR, 85}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 86}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 87}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 89}, {23, SHIFT, 120}, {36, SHIFT, 121}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 96}, {4, SHIFT, 122}, {9, SHIFT, 123}, },
			{{-1, REDUCE, 48}, {5, SHIFT, 124}, },
			{{-1, REDUCE, 50}, {0, SHIFT, 125}, {1, SHIFT, 126}, },
			{{-1, REDUCE, 53}, {2, SHIFT, 127}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 57}, {10, SHIFT, 128}, {13, SHIFT, 129}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 104}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 105}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 106}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 107}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 108}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 109}, {15, SHIFT, 68}, {22, SHIFT, 69}, {28, SHIFT, 135}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, ERROR, 110}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 112}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 113}, {15, SHIFT, 68}, {17, SHIFT, 18}, {22, SHIFT, 69}, {23, SHIFT, 19}, {26, SHIFT, 20}, {28, SHIFT, 138}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 73}, },
			{{-1, ERROR, 114}, {15, SHIFT, 68}, {22, SHIFT, 69}, {28, SHIFT, 140}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, ERROR, 115}, {15, SHIFT, 68}, {22, SHIFT, 69}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 117}, {4, SHIFT, 122}, {12, SHIFT, 142}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 119}, {4, SHIFT, 122}, {12, SHIFT, 143}, },
			{{-1, ERROR, 120}, {13, SHIFT, 144}, },
			{{-1, ERROR, 121}, {11, SHIFT, 145}, },
			{{-1, ERROR, 122}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 123}, {16, SHIFT, 147}, },
			{{-1, ERROR, 124}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 125}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 126}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 127}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 128}, {24, SHIFT, 152}, {36, SHIFT, 153}, },
			{{-1, ERROR, 129}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 130}, {4, SHIFT, 122}, {12, SHIFT, 155}, },
			{{-1, ERROR, 131}, {4, SHIFT, 122}, {12, SHIFT, 156}, },
			{{-1, ERROR, 132}, {4, SHIFT, 122}, {9, SHIFT, 157}, },
			{{-1, ERROR, 133}, {4, SHIFT, 122}, {14, SHIFT, 158}, },
			{{-1, ERROR, 134}, {4, SHIFT, 122}, {9, SHIFT, 159}, },
			{{-1, ERROR, 135}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 136}, {4, SHIFT, 122}, {9, SHIFT, 161}, },
			{{-1, ERROR, 137}, {4, SHIFT, 122}, {9, SHIFT, 162}, },
			{{-1, ERROR, 138}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 139}, {15, SHIFT, 68}, {22, SHIFT, 69}, {28, SHIFT, 164}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, ERROR, 140}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 141}, {16, SHIFT, 166}, },
			{{-1, ERROR, 142}, {15, SHIFT, 68}, {22, SHIFT, 69}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 144}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 44}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 47}, {5, SHIFT, 124}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 125}, {1, SHIFT, 126}, },
			{{-1, REDUCE, 52}, {2, SHIFT, 127}, },
			{{-1, REDUCE, 51}, {2, SHIFT, 127}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 153}, {11, SHIFT, 171}, },
			{{-1, ERROR, 154}, {4, SHIFT, 122}, {14, SHIFT, 172}, },
			{{-1, ERROR, 155}, {9, SHIFT, 173}, },
			{{-1, ERROR, 156}, {15, SHIFT, 68}, {22, SHIFT, 69}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 158}, {6, SHIFT, 175}, },
			{{-1, ERROR, 159}, {16, SHIFT, 176}, },
			{{-1, ERROR, 160}, {4, SHIFT, 122}, {9, SHIFT, 177}, },
			{{-1, ERROR, 161}, {16, SHIFT, 178}, },
			{{-1, ERROR, 162}, {16, SHIFT, 179}, },
			{{-1, ERROR, 163}, {4, SHIFT, 122}, {9, SHIFT, 180}, },
			{{-1, ERROR, 164}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 165}, {4, SHIFT, 122}, {9, SHIFT, 182}, },
			{{-1, ERROR, 166}, {16, SHIFT, 183}, },
			{{-1, ERROR, 167}, {19, SHIFT, 184}, },
			{{-1, ERROR, 168}, {4, SHIFT, 122}, {14, SHIFT, 185}, },
			{{-1, ERROR, 169}, {12, SHIFT, 186}, },
			{{-1, REDUCE, 43}, {4, SHIFT, 122}, {8, SHIFT, 187}, },
			{{-1, REDUCE, 44}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 175}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 177}, {16, SHIFT, 190}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 180}, {16, SHIFT, 191}, },
			{{-1, ERROR, 181}, {4, SHIFT, 122}, {9, SHIFT, 192}, },
			{{-1, ERROR, 182}, {16, SHIFT, 193}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 184}, {15, SHIFT, 68}, {22, SHIFT, 69}, {31, SHIFT, 71}, {35, SHIFT, 72}, {36, SHIFT, 83}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 44}, {3, SHIFT, 86}, {11, SHIFT, 87}, {21, SHIFT, 88}, {26, SHIFT, 89}, {32, SHIFT, 90}, {33, SHIFT, 91}, {36, SHIFT, 92}, {37, SHIFT, 93}, },
			{{-1, ERROR, 188}, {12, SHIFT, 196}, },
			{{-1, ERROR, 189}, {4, SHIFT, 122}, {9, SHIFT, 197}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 192}, {16, SHIFT, 198}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 27}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 31}, {54, 60}, },
			{{-1, 6}, {9, 12}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 23}, {26, 36}, {47, 36}, {76, 36}, {113, 36}, },
			{{-1, 24}, {21, 33}, {50, 56}, {64, 56}, },
			{{-1, 25}, {27, 39}, {37, 39}, {48, 39}, {52, 39}, },
			{{-1, 57}, },
			{{-1, 65}, {66, 80}, },
			{{-1, 58}, {64, 79}, },
			{{-1, 74}, {77, 111}, {84, 111}, {109, 111}, {114, 111}, {115, 141}, {139, 111}, {142, 167}, {156, 174}, {184, 194}, },
			{{-1, 75}, },
			{{-1, 94}, },
			{{-1, 169}, {171, 188}, {187, 195}, },
			{{-1, 95}, },
			{{-1, 170}, {70, 96}, {85, 117}, {87, 119}, {104, 130}, {105, 131}, {106, 132}, {107, 133}, {108, 134}, {110, 136}, {112, 137}, {129, 154}, {135, 160}, {138, 163}, {140, 165}, {144, 168}, {164, 181}, {175, 189}, },
			{{-1, 97}, {122, 146}, },
			{{-1, 98}, {124, 148}, },
			{{-1, 99}, {125, 149}, {126, 150}, },
			{{-1, 100}, {86, 118}, {127, 151}, },
			{{-1, 101}, },
			{{-1, 102}, },
			{{-1, 103}, },
			{{-1, 9}, },
			{{-1, 26}, {40, 47}, {61, 76}, {78, 113}, },
			{{-1, 27}, {26, 37}, {40, 48}, {47, 52}, },
			{{-1, 77}, {68, 84}, {76, 109}, {78, 114}, {113, 139}, },
			{{-1, 66}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: '{', 'extends'",
			"expecting: 'static'",
			"expecting: '}', 'boolean', 'int', 'new', 'public', id",
			"expecting: 'void'",
			"expecting: '[', id",
			"expecting: 'boolean', 'int', 'new', id",
			"expecting: '{', '}', 'boolean', 'if', 'int', 'new', 'public', 'return', 'System.out.println', 'while', id",
			"expecting: '}', 'public'",
			"expecting: 'main'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: 'String'",
			"expecting: ')', 'boolean', 'int', 'new', id",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: '{', 'boolean', 'if', 'int', 'new', 'return', 'System.out.println', 'while', id",
			"expecting: '{', '}', 'if', 'System.out.println', 'while', id",
			"expecting: '!', '(', 'false', 'new', 'this', 'true', id, num",
			"expecting: '=', '[', id",
			"expecting: '{', '}', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '{', '}', 'else', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '{', 'if', 'return', 'System.out.println', 'while', id",
			"expecting: '=', '['",
			"expecting: '+', '-', '*', '&&', '<', ',', ';', '.', ')', '[', ']'",
			"expecting: 'int', id",
			"expecting: '&&', ';'",
			"expecting: '&&', '<', ',', ';', ')', ']'",
			"expecting: '+', '-', '&&', '<', ',', ';', ')', ']'",
			"expecting: '+', '-', '*', '&&', '<', ',', ';', ')', ']'",
			"expecting: '{', 'if', 'System.out.println', 'while', id",
			"expecting: '&&', ')'",
			"expecting: '}'",
			"expecting: 'length', id",
			"expecting: '&&', ']'",
			"expecting: '!', '(', ')', 'false', 'new', 'this', 'true', id, num",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: '&&', ',', ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 3, 3, 3, 3, 5, 6, 3, 7, 8, 1, 9, 3, 1, 10, 1, 11, 1, 12, 1, 13, 8, 13, 4, 14, 15, 1, 1, 1, 16, 3, 12, 13, 3, 13, 8, 17, 1, 17, 12, 3, 3, 8, 13, 18, 19, 3, 13, 3, 20, 4, 1, 21, 22, 3, 1, 23, 22, 4, 11, 22, 22, 21, 24, 17, 25, 17, 17, 26, 27, 28, 23, 29, 23, 22, 22, 4, 28, 30, 24, 25, 25, 25, 31, 32, 31, 31, 31, 31, 31, 31, 33, 34, 35, 36, 36, 31, 31, 31, 25, 25, 25, 25, 25, 29, 25, 27, 25, 23, 29, 37, 28, 38, 36, 38, 20, 17, 25, 39, 25, 25, 25, 25, 40, 25, 38, 38, 33, 41, 33, 25, 33, 33, 25, 29, 25, 39, 37, 31, 25, 42, 34, 13, 35, 36, 36, 36, 31, 17, 41, 16, 37, 28, 43, 39, 33, 39, 39, 33, 25, 33, 39, 44, 41, 21, 45, 42, 31, 28, 28, 25, 13, 39, 13, 13, 39, 33, 39, 3, 37, 31, 31, 42, 21, 33, 13, 13, 39, 13, 28, 21, 31, 28, 13, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
