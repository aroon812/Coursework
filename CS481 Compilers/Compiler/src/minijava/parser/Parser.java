/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.parser;

import minijava.lexer.*;
import minijava.node.*;
import minijava.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser {
	public final Analysis ignoredTokens = new AnalysisAdapter();

	protected ArrayList<Object> nodeList;

	private final Lexer lexer;
	private final ListIterator<Object> stack = new LinkedList<Object>()
			.listIterator();
	private int last_pos;
	private int last_line;
	private Token last_token;
	private final TokenIndex converter = new TokenIndex();
	private final int[] action = new int[2];

	private final static int SHIFT = 0;
	private final static int REDUCE = 1;
	private final static int ACCEPT = 2;
	private final static int ERROR = 3;

	public Parser(@SuppressWarnings("hiding") Lexer lexer) {
		this.lexer = lexer;
	}

	@SuppressWarnings({ "unchecked", "unused" })
	private void push(int numstate, ArrayList<Object> listNode)
			throws ParserException, LexerException, IOException {
		this.nodeList = listNode;

		if (!this.stack.hasNext()) {
			this.stack.add(new State(numstate, this.nodeList));
			return;
		}

		State s = (State) this.stack.next();
		s.state = numstate;
		s.nodes = this.nodeList;
	}

	private int goTo(int index) {
		int state = state();
		int low = 1;
		int high = gotoTable[index].length - 1;
		int value = gotoTable[index][0][1];

		while (low <= high) {
			// int middle = (low + high) / 2;
			int middle = (low + high) >>> 1;

			if (state < gotoTable[index][middle][0]) {
				high = middle - 1;
			} else if (state > gotoTable[index][middle][0]) {
				low = middle + 1;
			} else {
				value = gotoTable[index][middle][1];
				break;
			}
		}

		return value;
	}

	private int state() {
		State s = (State) this.stack.previous();
		this.stack.next();
		return s.state;
	}

	private ArrayList<Object> pop() {
		return ((State) this.stack.previous()).nodes;
	}

	private int index(Switchable token) {
		this.converter.index = -1;
		token.apply(this.converter);
		return this.converter.index;
	}

	@SuppressWarnings("unchecked")
	public Start parse() throws ParserException, LexerException, IOException {
		push(0, null);
		List<Node> ign = null;
		while (true) {
			while (index(this.lexer.peek()) == -1) {
				if (ign == null) {
					ign = new LinkedList<Node>();
				}

				ign.add(this.lexer.next());
			}

			if (ign != null) {
				this.ignoredTokens.setIn(this.lexer.peek(), ign);
				ign = null;
			}

			this.last_pos = this.lexer.peek().getPos();
			this.last_line = this.lexer.peek().getLine();
			this.last_token = this.lexer.peek();

			int index = index(this.lexer.peek());
			this.action[0] = Parser.actionTable[state()][0][1];
			this.action[1] = Parser.actionTable[state()][0][2];

			int low = 1;
			int high = Parser.actionTable[state()].length - 1;

			while (low <= high) {
				int middle = (low + high) / 2;

				if (index < Parser.actionTable[state()][middle][0]) {
					high = middle - 1;
				} else if (index > Parser.actionTable[state()][middle][0]) {
					low = middle + 1;
				} else {
					this.action[0] = Parser.actionTable[state()][middle][1];
					this.action[1] = Parser.actionTable[state()][middle][2];
					break;
				}
			}

			switch (this.action[0]) {
			case SHIFT: {
				ArrayList<Object> list = new ArrayList<Object>();
				list.add(this.lexer.next());
				push(this.action[1], list);
			}
				break;
			case REDUCE: {
				int reduction = this.action[1];
				if (reduction < 500)
					reduce_0(reduction);
			}
				break;
			case ACCEPT: {
				EOF node2 = (EOF) this.lexer.next();
				PProgram node1 = (PProgram) pop().get(0);
				Start node = new Start(node1, node2);
				return node;
			}
			case ERROR:
				throw new ParserException(this.last_token, "[" + this.last_line
						+ "," + this.last_pos + "] "
						+ Parser.errorMessages[Parser.errors[this.action[1]]]);
			}
		}
	}

	private void reduce_0(int reduction) throws IOException, LexerException,
			ParserException {
		switch (reduction) {
		case 0: /* reduce AAprogram1Program */
		{
			ArrayList<Object> list = new0();
			push(goTo(0), list);
		}
			break;
		case 1: /* reduce AAprogram2Program */
		{
			ArrayList<Object> list = new1();
			push(goTo(0), list);
		}
			break;
		case 2: /* reduce AMainClass */
		{
			ArrayList<Object> list = new2();
			push(goTo(1), list);
		}
			break;
		case 3: /* reduce AArray */
		{
			ArrayList<Object> list = new3();
			push(goTo(2), list);
		}
			break;
		case 4: /* reduce ABaseDeclClassDecl */
		{
			ArrayList<Object> list = new4();
			push(goTo(3), list);
		}
			break;
		case 5: /* reduce AExtendsDeclClassDecl */
		{
			ArrayList<Object> list = new5();
			push(goTo(3), list);
		}
			break;
		case 6: /* reduce AAbasedecl1BaseDecl */
		{
			ArrayList<Object> list = new6();
			push(goTo(4), list);
		}
			break;
		case 7: /* reduce AAbasedecl2BaseDecl */
		{
			ArrayList<Object> list = new7();
			push(goTo(4), list);
		}
			break;
		case 8: /* reduce AAbasedecl3BaseDecl */
		{
			ArrayList<Object> list = new8();
			push(goTo(4), list);
		}
			break;
		case 9: /* reduce AAbasedecl4BaseDecl */
		{
			ArrayList<Object> list = new9();
			push(goTo(4), list);
		}
			break;
		case 10: /* reduce AAextendsdecl1ExtendsDecl */
		{
			ArrayList<Object> list = new10();
			push(goTo(5), list);
		}
			break;
		case 11: /* reduce AAextendsdecl2ExtendsDecl */
		{
			ArrayList<Object> list = new11();
			push(goTo(5), list);
		}
			break;
		case 12: /* reduce AAextendsdecl3ExtendsDecl */
		{
			ArrayList<Object> list = new12();
			push(goTo(5), list);
		}
			break;
		case 13: /* reduce AAextendsdecl4ExtendsDecl */
		{
			ArrayList<Object> list = new13();
			push(goTo(5), list);
		}
			break;
		case 14: /* reduce AVarDecl */
		{
			ArrayList<Object> list = new14();
			push(goTo(6), list);
		}
			break;
		case 15: /* reduce AIntArrayType */
		{
			ArrayList<Object> list = new15();
			push(goTo(7), list);
		}
			break;
		case 16: /* reduce ABoolType */
		{
			ArrayList<Object> list = new16();
			push(goTo(7), list);
		}
			break;
		case 17: /* reduce AIntType */
		{
			ArrayList<Object> list = new17();
			push(goTo(7), list);
		}
			break;
		case 18: /* reduce AUserType */
		{
			ArrayList<Object> list = new18();
			push(goTo(7), list);
		}
			break;
		case 19: /* reduce AAmethoddecl1MethodDecl */
		{
			ArrayList<Object> list = new19();
			push(goTo(8), list);
		}
			break;
		case 20: /* reduce AAmethoddecl2MethodDecl */
		{
			ArrayList<Object> list = new20();
			push(goTo(8), list);
		}
			break;
		case 21: /* reduce AAmethoddecl3MethodDecl */
		{
			ArrayList<Object> list = new21();
			push(goTo(8), list);
		}
			break;
		case 22: /* reduce AAmethoddecl4MethodDecl */
		{
			ArrayList<Object> list = new22();
			push(goTo(8), list);
		}
			break;
		case 23: /* reduce AAmethoddecl5MethodDecl */
		{
			ArrayList<Object> list = new23();
			push(goTo(8), list);
		}
			break;
		case 24: /* reduce AAmethoddecl6MethodDecl */
		{
			ArrayList<Object> list = new24();
			push(goTo(8), list);
		}
			break;
		case 25: /* reduce AAmethoddecl7MethodDecl */
		{
			ArrayList<Object> list = new25();
			push(goTo(8), list);
		}
			break;
		case 26: /* reduce AAmethoddecl8MethodDecl */
		{
			ArrayList<Object> list = new26();
			push(goTo(8), list);
		}
			break;
		case 27: /* reduce AAformallist1FormalList */
		{
			ArrayList<Object> list = new27();
			push(goTo(9), list);
		}
			break;
		case 28: /* reduce AAformallist2FormalList */
		{
			ArrayList<Object> list = new28();
			push(goTo(9), list);
		}
			break;
		case 29: /* reduce AFormalsTail */
		{
			ArrayList<Object> list = new29();
			push(goTo(10), list);
		}
			break;
		case 30: /* reduce AFormal */
		{
			ArrayList<Object> list = new30();
			push(goTo(11), list);
		}
			break;
		case 31: /* reduce ABlockStmt */
		{
			ArrayList<Object> list = new31();
			push(goTo(12), list);
		}
			break;
		case 32: /* reduce AIfStmt */
		{
			ArrayList<Object> list = new32();
			push(goTo(12), list);
		}
			break;
		case 33: /* reduce AWhileStmt */
		{
			ArrayList<Object> list = new33();
			push(goTo(12), list);
		}
			break;
		case 34: /* reduce APrintStmt */
		{
			ArrayList<Object> list = new34();
			push(goTo(12), list);
		}
			break;
		case 35: /* reduce AAsmtStmt */
		{
			ArrayList<Object> list = new35();
			push(goTo(12), list);
		}
			break;
		case 36: /* reduce AArrayAsmtStmt */
		{
			ArrayList<Object> list = new36();
			push(goTo(12), list);
		}
			break;
		case 37: /* reduce AAblock1Block */
		{
			ArrayList<Object> list = new37();
			push(goTo(13), list);
		}
			break;
		case 38: /* reduce AAblock2Block */
		{
			ArrayList<Object> list = new38();
			push(goTo(13), list);
		}
			break;
		case 39: /* reduce AAndExp */
		{
			ArrayList<Object> list = new39();
			push(goTo(14), list);
		}
			break;
		case 40: /* reduce AEExp */
		{
			ArrayList<Object> list = new40();
			push(goTo(14), list);
		}
			break;
		case 41: /* reduce ALtExpLt */
		{
			ArrayList<Object> list = new41();
			push(goTo(15), list);
		}
			break;
		case 42: /* reduce AEExpLt */
		{
			ArrayList<Object> list = new42();
			push(goTo(15), list);
		}
			break;
		case 43: /* reduce APlusExpAdd */
		{
			ArrayList<Object> list = new43();
			push(goTo(16), list);
		}
			break;
		case 44: /* reduce AMinusExpAdd */
		{
			ArrayList<Object> list = new44();
			push(goTo(16), list);
		}
			break;
		case 45: /* reduce AEExpAdd */
		{
			ArrayList<Object> list = new45();
			push(goTo(16), list);
		}
			break;
		case 46: /* reduce ATimesExpTimes */
		{
			ArrayList<Object> list = new46();
			push(goTo(17), list);
		}
			break;
		case 47: /* reduce AEExpTimes */
		{
			ArrayList<Object> list = new47();
			push(goTo(17), list);
		}
			break;
		case 48: /* reduce ANotExpNot */
		{
			ArrayList<Object> list = new48();
			push(goTo(18), list);
		}
			break;
		case 49: /* reduce AEExpNot */
		{
			ArrayList<Object> list = new49();
			push(goTo(18), list);
		}
			break;
		case 50: /* reduce AArrayRefExpRef */
		{
			ArrayList<Object> list = new50();
			push(goTo(19), list);
		}
			break;
		case 51: /* reduce AMethodExpRef */
		{
			ArrayList<Object> list = new51();
			push(goTo(19), list);
		}
			break;
		case 52: /* reduce AEExpRef */
		{
			ArrayList<Object> list = new52();
			push(goTo(19), list);
		}
			break;
		case 53: /* reduce ANumExpLit */
		{
			ArrayList<Object> list = new53();
			push(goTo(20), list);
		}
			break;
		case 54: /* reduce AIdExpLit */
		{
			ArrayList<Object> list = new54();
			push(goTo(20), list);
		}
			break;
		case 55: /* reduce ATrueExpLit */
		{
			ArrayList<Object> list = new55();
			push(goTo(20), list);
		}
			break;
		case 56: /* reduce AFalseExpLit */
		{
			ArrayList<Object> list = new56();
			push(goTo(20), list);
		}
			break;
		case 57: /* reduce AThisExpLit */
		{
			ArrayList<Object> list = new57();
			push(goTo(20), list);
		}
			break;
		case 58: /* reduce AAllocExpLit */
		{
			ArrayList<Object> list = new58();
			push(goTo(20), list);
		}
			break;
		case 59: /* reduce ANewExpLit */
		{
			ArrayList<Object> list = new59();
			push(goTo(20), list);
		}
			break;
		case 60: /* reduce ABindExpLit */
		{
			ArrayList<Object> list = new60();
			push(goTo(20), list);
		}
			break;
		case 61: /* reduce ALengthMethod */
		{
			ArrayList<Object> list = new61();
			push(goTo(21), list);
		}
			break;
		case 62: /* reduce AAothermethod1Method */
		{
			ArrayList<Object> list = new62();
			push(goTo(21), list);
		}
			break;
		case 63: /* reduce AAothermethod2Method */
		{
			ArrayList<Object> list = new63();
			push(goTo(21), list);
		}
			break;
		case 64: /* reduce AAexplist1ExpList */
		{
			ArrayList<Object> list = new64();
			push(goTo(22), list);
		}
			break;
		case 65: /* reduce AAexplist2ExpList */
		{
			ArrayList<Object> list = new65();
			push(goTo(22), list);
		}
			break;
		case 66: /* reduce AExpTail */
		{
			ArrayList<Object> list = new66();
			push(goTo(23), list);
		}
			break;
		case 67: /* reduce ATerminal$ClassDecl */
		{
			ArrayList<Object> list = new67();
			push(goTo(24), list);
		}
			break;
		case 68: /* reduce ANonTerminal$ClassDecl */
		{
			ArrayList<Object> list = new68();
			push(goTo(24), list);
		}
			break;
		case 69: /* reduce ATerminal$VarDecl */
		{
			ArrayList<Object> list = new69();
			push(goTo(25), list);
		}
			break;
		case 70: /* reduce ANonTerminal$VarDecl */
		{
			ArrayList<Object> list = new70();
			push(goTo(25), list);
		}
			break;
		case 71: /* reduce ATerminal$MethodDecl */
		{
			ArrayList<Object> list = new71();
			push(goTo(26), list);
		}
			break;
		case 72: /* reduce ANonTerminal$MethodDecl */
		{
			ArrayList<Object> list = new72();
			push(goTo(26), list);
		}
			break;
		case 73: /* reduce ATerminal$Stmt */
		{
			ArrayList<Object> list = new73();
			push(goTo(27), list);
		}
			break;
		case 74: /* reduce ANonTerminal$Stmt */
		{
			ArrayList<Object> list = new74();
			push(goTo(27), list);
		}
			break;
		case 75: /* reduce ATerminal$FormalsTail */
		{
			ArrayList<Object> list = new75();
			push(goTo(28), list);
		}
			break;
		case 76: /* reduce ANonTerminal$FormalsTail */
		{
			ArrayList<Object> list = new76();
			push(goTo(28), list);
		}
			break;
		case 77: /* reduce ATerminal$ExpTail */
		{
			ArrayList<Object> list = new77();
			push(goTo(29), list);
		}
			break;
		case 78: /* reduce ANonTerminal$ExpTail */
		{
			ArrayList<Object> list = new78();
			push(goTo(29), list);
		}
			break;
		}
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new0() /* reduce AAprogram1Program */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PProgram pprogramNode1;
		{
			// Block
			LinkedList<Object> listNode3 = new LinkedList<Object>();
			{
				// Block
				PClassDecl pclassdeclNode2;
				pclassdeclNode2 = (PClassDecl) nodeArrayList1.get(0);
				if (pclassdeclNode2 != null) {
					listNode3.add(pclassdeclNode2);
				}
			}

			pprogramNode1 = new AProgram(listNode3);
		}
		nodeList.add(pprogramNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new1() /* reduce AAprogram2Program */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PProgram pprogramNode1;
		{
			// Block
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			{
				// Block
				PClassDecl pclassdeclNode2;
				LinkedList<Object> listNode3 = new LinkedList<Object>();
				pclassdeclNode2 = (PClassDecl) nodeArrayList1.get(0);
				listNode3 = (LinkedList) nodeArrayList2.get(0);
				if (pclassdeclNode2 != null) {
					listNode4.add(pclassdeclNode2);
				}
				if (listNode3 != null) {
					listNode4.addAll(listNode3);
				}
			}

			pprogramNode1 = new AProgram(listNode4);
		}
		nodeList.add(pprogramNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new2() /* reduce AMainClass */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList16 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList15 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList14 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList13 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList12 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			PStmt pstmtNode3;
			tidNode2 = (TId) nodeArrayList2.get(0);
			pstmtNode3 = (PStmt) nodeArrayList14.get(0);

			pclassdeclNode1 = new AMainClassDecl(tidNode2, pstmtNode3);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new3() /* reduce AArray */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new4() /* reduce ABaseDeclClassDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		pclassdeclNode1 = (PClassDecl) nodeArrayList1.get(0);
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new5() /* reduce AExtendsDeclClassDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		pclassdeclNode1 = (PClassDecl) nodeArrayList1.get(0);
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new6() /* reduce AAbasedecl1BaseDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			LinkedList<Object> listNode3 = new LinkedList<Object>();
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			{
				// Block
			}
			{
				// Block
			}

			pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode3, listNode4);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new7() /* reduce AAbasedecl2BaseDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			{
				// Block
				LinkedList<Object> listNode3 = new LinkedList<Object>();
				listNode3 = (LinkedList) nodeArrayList4.get(0);
				if (listNode3 != null) {
					listNode4.addAll(listNode3);
				}
			}
			{
				// Block
			}

			pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode4, listNode5);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new8() /* reduce AAbasedecl3BaseDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			LinkedList<Object> listNode3 = new LinkedList<Object>();
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			{
				// Block
			}
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList4.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}

			pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode3, listNode5);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new9() /* reduce AAbasedecl4BaseDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			{
				// Block
				LinkedList<Object> listNode3 = new LinkedList<Object>();
				listNode3 = (LinkedList) nodeArrayList4.get(0);
				if (listNode3 != null) {
					listNode4.addAll(listNode3);
				}
			}
			{
				// Block
				LinkedList<Object> listNode5 = new LinkedList<Object>();
				listNode5 = (LinkedList) nodeArrayList5.get(0);
				if (listNode5 != null) {
					listNode6.addAll(listNode5);
				}
			}

			pclassdeclNode1 = new ABaseClassDecl(tidNode2, listNode4, listNode6);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new10() /* reduce AAextendsdecl1ExtendsDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList4.get(0);
			{
				// Block
			}
			{
				// Block
			}

			pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode4,
					listNode5);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new11() /* reduce AAextendsdecl2ExtendsDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList4.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList6.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}
			{
				// Block
			}

			pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode5,
					listNode6);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new12() /* reduce AAextendsdecl3ExtendsDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList4.get(0);
			{
				// Block
			}
			{
				// Block
				LinkedList<Object> listNode5 = new LinkedList<Object>();
				listNode5 = (LinkedList) nodeArrayList6.get(0);
				if (listNode5 != null) {
					listNode6.addAll(listNode5);
				}
			}

			pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode4,
					listNode6);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new13() /* reduce AAextendsdecl4ExtendsDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PClassDecl pclassdeclNode1;
		{
			// Block
			TId tidNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode7 = new LinkedList<Object>();
			tidNode2 = (TId) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList4.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList6.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}
			{
				// Block
				LinkedList<Object> listNode6 = new LinkedList<Object>();
				listNode6 = (LinkedList) nodeArrayList7.get(0);
				if (listNode6 != null) {
					listNode7.addAll(listNode6);
				}
			}

			pclassdeclNode1 = new ASubClassDecl(tidNode2, tidNode3, listNode5,
					listNode7);
		}
		nodeList.add(pclassdeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new14() /* reduce AVarDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PVarDecl pvardeclNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			ptypeNode2 = (PType) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);

			pvardeclNode1 = new AVarDecl(ptypeNode2, tidNode3);
		}
		nodeList.add(pvardeclNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new15() /* reduce AIntArrayType */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PType ptypeNode1;
		{
			// Block

			ptypeNode1 = new AIntArrayType();
		}
		nodeList.add(ptypeNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new16() /* reduce ABoolType */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PType ptypeNode1;
		{
			// Block

			ptypeNode1 = new ABoolType();
		}
		nodeList.add(ptypeNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new17() /* reduce AIntType */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PType ptypeNode1;
		{
			// Block

			ptypeNode1 = new AIntType();
		}
		nodeList.add(ptypeNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new18() /* reduce AUserType */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PType ptypeNode1;
		{
			// Block
			TId tidNode2;
			tidNode2 = (TId) nodeArrayList1.get(0);

			ptypeNode1 = new AUserType(tidNode2);
		}
		nodeList.add(ptypeNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new19() /* reduce AAmethoddecl1MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode8 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
			}
			{
				// Block
			}
			{
				// Block
				PStmt pstmtNode6;
				{
					// Block
					PExp pexpNode7;
					pexpNode7 = (PExp) nodeArrayList8.get(0);

					pstmtNode6 = new AReturnStmt(pexpNode7);
				}
				if (pstmtNode6 != null) {
					listNode8.add(pstmtNode6);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4,
					listNode5, listNode8);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new20() /* reduce AAmethoddecl2MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			LinkedList<Object> listNode9 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList5.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}
			{
				// Block
			}
			{
				// Block
				PStmt pstmtNode7;
				{
					// Block
					PExp pexpNode8;
					pexpNode8 = (PExp) nodeArrayList9.get(0);

					pstmtNode7 = new AReturnStmt(pexpNode8);
				}
				if (pstmtNode7 != null) {
					listNode9.add(pstmtNode7);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5,
					listNode6, listNode9);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new21() /* reduce AAmethoddecl3MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			LinkedList<Object> listNode9 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
			}
			{
				// Block
				LinkedList<Object> listNode5 = new LinkedList<Object>();
				listNode5 = (LinkedList) nodeArrayList7.get(0);
				if (listNode5 != null) {
					listNode6.addAll(listNode5);
				}
			}
			{
				// Block
				PStmt pstmtNode7;
				{
					// Block
					PExp pexpNode8;
					pexpNode8 = (PExp) nodeArrayList9.get(0);

					pstmtNode7 = new AReturnStmt(pexpNode8);
				}
				if (pstmtNode7 != null) {
					listNode9.add(pstmtNode7);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4,
					listNode6, listNode9);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new22() /* reduce AAmethoddecl4MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList12 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode7 = new LinkedList<Object>();
			LinkedList<Object> listNode10 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList5.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}
			{
				// Block
				LinkedList<Object> listNode6 = new LinkedList<Object>();
				listNode6 = (LinkedList) nodeArrayList8.get(0);
				if (listNode6 != null) {
					listNode7.addAll(listNode6);
				}
			}
			{
				// Block
				PStmt pstmtNode8;
				{
					// Block
					PExp pexpNode9;
					pexpNode9 = (PExp) nodeArrayList10.get(0);

					pstmtNode8 = new AReturnStmt(pexpNode9);
				}
				if (pstmtNode8 != null) {
					listNode10.add(pstmtNode8);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5,
					listNode7, listNode10);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new23() /* reduce AAmethoddecl5MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode9 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
			}
			{
				// Block
			}
			{
				// Block
				LinkedList<Object> listNode6 = new LinkedList<Object>();
				PStmt pstmtNode7;
				listNode6 = (LinkedList) nodeArrayList7.get(0);
				{
					// Block
					PExp pexpNode8;
					pexpNode8 = (PExp) nodeArrayList9.get(0);

					pstmtNode7 = new AReturnStmt(pexpNode8);
				}
				if (listNode6 != null) {
					listNode9.addAll(listNode6);
				}
				if (pstmtNode7 != null) {
					listNode9.add(pstmtNode7);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4,
					listNode5, listNode9);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new24() /* reduce AAmethoddecl6MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList12 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			LinkedList<Object> listNode10 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList5.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}
			{
				// Block
			}
			{
				// Block
				LinkedList<Object> listNode7 = new LinkedList<Object>();
				PStmt pstmtNode8;
				listNode7 = (LinkedList) nodeArrayList8.get(0);
				{
					// Block
					PExp pexpNode9;
					pexpNode9 = (PExp) nodeArrayList10.get(0);

					pstmtNode8 = new AReturnStmt(pexpNode9);
				}
				if (listNode7 != null) {
					listNode10.addAll(listNode7);
				}
				if (pstmtNode8 != null) {
					listNode10.add(pstmtNode8);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5,
					listNode6, listNode10);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new25() /* reduce AAmethoddecl7MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList12 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			LinkedList<Object> listNode6 = new LinkedList<Object>();
			LinkedList<Object> listNode10 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
			}
			{
				// Block
				LinkedList<Object> listNode5 = new LinkedList<Object>();
				listNode5 = (LinkedList) nodeArrayList7.get(0);
				if (listNode5 != null) {
					listNode6.addAll(listNode5);
				}
			}
			{
				// Block
				LinkedList<Object> listNode7 = new LinkedList<Object>();
				PStmt pstmtNode8;
				listNode7 = (LinkedList) nodeArrayList8.get(0);
				{
					// Block
					PExp pexpNode9;
					pexpNode9 = (PExp) nodeArrayList10.get(0);

					pstmtNode8 = new AReturnStmt(pexpNode9);
				}
				if (listNode7 != null) {
					listNode10.addAll(listNode7);
				}
				if (pstmtNode8 != null) {
					listNode10.add(pstmtNode8);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode4,
					listNode6, listNode10);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new26() /* reduce AAmethoddecl8MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList13 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList12 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList11 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList10 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList9 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList8 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PMethod pmethodNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			LinkedList<Object> listNode7 = new LinkedList<Object>();
			LinkedList<Object> listNode11 = new LinkedList<Object>();
			ptypeNode2 = (PType) nodeArrayList2.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList5.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}
			{
				// Block
				LinkedList<Object> listNode6 = new LinkedList<Object>();
				listNode6 = (LinkedList) nodeArrayList8.get(0);
				if (listNode6 != null) {
					listNode7.addAll(listNode6);
				}
			}
			{
				// Block
				LinkedList<Object> listNode8 = new LinkedList<Object>();
				PStmt pstmtNode9;
				listNode8 = (LinkedList) nodeArrayList9.get(0);
				{
					// Block
					PExp pexpNode10;
					pexpNode10 = (PExp) nodeArrayList11.get(0);

					pstmtNode9 = new AReturnStmt(pexpNode10);
				}
				if (listNode8 != null) {
					listNode11.addAll(listNode8);
				}
				if (pstmtNode9 != null) {
					listNode11.add(pstmtNode9);
				}
			}

			pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5,
					listNode7, listNode11);
		}
		nodeList.add(pmethodNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new27() /* reduce AAformallist1FormalList */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PFormal pformalNode1;
			pformalNode1 = (PFormal) nodeArrayList1.get(0);
			if (pformalNode1 != null) {
				listNode2.add(pformalNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new28() /* reduce AAformallist2FormalList */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			PFormal pformalNode1;
			LinkedList<Object> listNode2 = new LinkedList<Object>();
			pformalNode1 = (PFormal) nodeArrayList1.get(0);
			listNode2 = (LinkedList) nodeArrayList2.get(0);
			if (pformalNode1 != null) {
				listNode3.add(pformalNode1);
			}
			if (listNode2 != null) {
				listNode3.addAll(listNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new29() /* reduce AFormalsTail */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PFormal pformalNode1;
			pformalNode1 = (PFormal) nodeArrayList2.get(0);
			if (pformalNode1 != null) {
				listNode2.add(pformalNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new30() /* reduce AFormal */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PFormal pformalNode1;
		{
			// Block
			PType ptypeNode2;
			TId tidNode3;
			ptypeNode2 = (PType) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList2.get(0);

			pformalNode1 = new AFormal(ptypeNode2, tidNode3);
		}
		nodeList.add(pformalNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new31() /* reduce ABlockStmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PStmt pstmtNode1;
		{
			// Block
			LinkedList<Object> listNode3 = new LinkedList<Object>();
			{
				// Block
				LinkedList<Object> listNode2 = new LinkedList<Object>();
				listNode2 = (LinkedList) nodeArrayList1.get(0);
				if (listNode2 != null) {
					listNode3.addAll(listNode2);
				}
			}

			pstmtNode1 = new ABlockStmt(listNode3);
		}
		nodeList.add(pstmtNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new32() /* reduce AIfStmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PStmt pstmtNode1;
		{
			// Block
			PExp pexpNode2;
			PStmt pstmtNode3;
			PStmt pstmtNode4;
			pexpNode2 = (PExp) nodeArrayList3.get(0);
			pstmtNode3 = (PStmt) nodeArrayList5.get(0);
			pstmtNode4 = (PStmt) nodeArrayList7.get(0);

			pstmtNode1 = new AIfStmt(pexpNode2, pstmtNode3, pstmtNode4);
		}
		nodeList.add(pstmtNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new33() /* reduce AWhileStmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PStmt pstmtNode1;
		{
			// Block
			PExp pexpNode2;
			PStmt pstmtNode3;
			pexpNode2 = (PExp) nodeArrayList3.get(0);
			pstmtNode3 = (PStmt) nodeArrayList5.get(0);

			pstmtNode1 = new AWhileStmt(pexpNode2, pstmtNode3);
		}
		nodeList.add(pstmtNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new34() /* reduce APrintStmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PStmt pstmtNode1;
		{
			// Block
			PExp pexpNode2;
			pexpNode2 = (PExp) nodeArrayList3.get(0);

			pstmtNode1 = new APrintStmt(pexpNode2);
		}
		nodeList.add(pstmtNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new35() /* reduce AAsmtStmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PStmt pstmtNode1;
		{
			// Block
			TId tidNode2;
			PExp pexpNode3;
			tidNode2 = (TId) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pstmtNode1 = new AAsmtStmt(tidNode2, pexpNode3);
		}
		nodeList.add(pstmtNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new36() /* reduce AArrayAsmtStmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList7 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PStmt pstmtNode1;
		{
			// Block
			TId tidNode2;
			PExp pexpNode3;
			PExp pexpNode4;
			tidNode2 = (TId) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);
			pexpNode4 = (PExp) nodeArrayList6.get(0);

			pstmtNode1 = new AArrayAsmtStmt(tidNode2, pexpNode3, pexpNode4);
		}
		nodeList.add(pstmtNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new37() /* reduce AAblock1Block */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode1 = new LinkedList<Object>();
		{
			// Block
		}
		nodeList.add(listNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new38() /* reduce AAblock2Block */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			listNode1 = (LinkedList) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode2.addAll(listNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new39() /* reduce AAndExp */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			PExp pexpNode3;
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new40() /* reduce AEExp */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new41() /* reduce ALtExpLt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			PExp pexpNode3;
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new42() /* reduce AEExpLt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new43() /* reduce APlusExpAdd */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			PExp pexpNode3;
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new44() /* reduce AMinusExpAdd */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			PExp pexpNode3;
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new45() /* reduce AEExpAdd */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new46() /* reduce ATimesExpTimes */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			PExp pexpNode3;
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pexpNode1 = new ATimesExp(pexpNode2, pexpNode3);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new47() /* reduce AEExpTimes */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new48() /* reduce ANotExpNot */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			pexpNode2 = (PExp) nodeArrayList2.get(0);

			pexpNode1 = new ANotExp(pexpNode2);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new49() /* reduce AEExpNot */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new50() /* reduce AArrayRefExpRef */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			PExp pexpNode3;
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			pexpNode3 = (PExp) nodeArrayList3.get(0);

			pexpNode1 = new ARefExp(pexpNode2, pexpNode3);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new51() /* reduce AMethodExpRef */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new52() /* reduce AEExpRef */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList1.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new53() /* reduce ANumExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			TNum tnumNode2;
			tnumNode2 = (TNum) nodeArrayList1.get(0);

			pexpNode1 = new ANumExp(tnumNode2);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new54() /* reduce AIdExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			TId tidNode2;
			tidNode2 = (TId) nodeArrayList1.get(0);

			pexpNode1 = new AIdExp(tidNode2);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new55() /* reduce ATrueExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block

			pexpNode1 = new ATrueExp();
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new56() /* reduce AFalseExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block

			pexpNode1 = new AFalseExp();
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new57() /* reduce AThisExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block

			pexpNode1 = new AThisExp();
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new58() /* reduce AAllocExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			pexpNode2 = (PExp) nodeArrayList4.get(0);

			pexpNode1 = new AAllocExp(pexpNode2);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new59() /* reduce ANewExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			TId tidNode2;
			tidNode2 = (TId) nodeArrayList2.get(0);

			pexpNode1 = new ANewExp(tidNode2);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new60() /* reduce ABindExpLit */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		pexpNode1 = (PExp) nodeArrayList2.get(0);
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new61() /* reduce ALengthMethod */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			pexpNode2 = (PExp) nodeArrayList1.get(0);

			pexpNode1 = new ALengthExp(pexpNode2);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new62() /* reduce AAothermethod1Method */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			TId tidNode3;
			LinkedList<Object> listNode4 = new LinkedList<Object>();
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
			}

			pexpNode1 = new AMethodExp(pexpNode2, tidNode3, listNode4);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new63() /* reduce AAothermethod2Method */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList6 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList5 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList4 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList3 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		PExp pexpNode1;
		{
			// Block
			PExp pexpNode2;
			TId tidNode3;
			LinkedList<Object> listNode5 = new LinkedList<Object>();
			pexpNode2 = (PExp) nodeArrayList1.get(0);
			tidNode3 = (TId) nodeArrayList3.get(0);
			{
				// Block
				LinkedList<Object> listNode4 = new LinkedList<Object>();
				listNode4 = (LinkedList) nodeArrayList5.get(0);
				if (listNode4 != null) {
					listNode5.addAll(listNode4);
				}
			}

			pexpNode1 = new AMethodExp(pexpNode2, tidNode3, listNode5);
		}
		nodeList.add(pexpNode1);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new64() /* reduce AAexplist1ExpList */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PExp pexpNode1;
			pexpNode1 = (PExp) nodeArrayList1.get(0);
			if (pexpNode1 != null) {
				listNode2.add(pexpNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new65() /* reduce AAexplist2ExpList */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			PExp pexpNode1;
			LinkedList<Object> listNode2 = new LinkedList<Object>();
			pexpNode1 = (PExp) nodeArrayList1.get(0);
			listNode2 = (LinkedList) nodeArrayList2.get(0);
			if (pexpNode1 != null) {
				listNode3.add(pexpNode1);
			}
			if (listNode2 != null) {
				listNode3.addAll(listNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new66() /* reduce AExpTail */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PExp pexpNode1;
			pexpNode1 = (PExp) nodeArrayList2.get(0);
			if (pexpNode1 != null) {
				listNode2.add(pexpNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new67() /* reduce ATerminal$ClassDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PClassDecl pclassdeclNode1;
			pclassdeclNode1 = (PClassDecl) nodeArrayList1.get(0);
			if (pclassdeclNode1 != null) {
				listNode2.add(pclassdeclNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new68() /* reduce ANonTerminal$ClassDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			PClassDecl pclassdeclNode2;
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			pclassdeclNode2 = (PClassDecl) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode3.addAll(listNode1);
			}
			if (pclassdeclNode2 != null) {
				listNode3.add(pclassdeclNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new69() /* reduce ATerminal$VarDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PVarDecl pvardeclNode1;
			pvardeclNode1 = (PVarDecl) nodeArrayList1.get(0);
			if (pvardeclNode1 != null) {
				listNode2.add(pvardeclNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new70() /* reduce ANonTerminal$VarDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			PVarDecl pvardeclNode2;
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			pvardeclNode2 = (PVarDecl) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode3.addAll(listNode1);
			}
			if (pvardeclNode2 != null) {
				listNode3.add(pvardeclNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new71() /* reduce ATerminal$MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PMethod pmethodNode1;
			pmethodNode1 = (PMethod) nodeArrayList1.get(0);
			if (pmethodNode1 != null) {
				listNode2.add(pmethodNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new72() /* reduce ANonTerminal$MethodDecl */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			PMethod pmethodNode2;
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			pmethodNode2 = (PMethod) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode3.addAll(listNode1);
			}
			if (pmethodNode2 != null) {
				listNode3.add(pmethodNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new73() /* reduce ATerminal$Stmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			PStmt pstmtNode1;
			pstmtNode1 = (PStmt) nodeArrayList1.get(0);
			if (pstmtNode1 != null) {
				listNode2.add(pstmtNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new74() /* reduce ANonTerminal$Stmt */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			PStmt pstmtNode2;
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			pstmtNode2 = (PStmt) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode3.addAll(listNode1);
			}
			if (pstmtNode2 != null) {
				listNode3.add(pstmtNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new75() /* reduce ATerminal$FormalsTail */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			if (listNode1 != null) {
				listNode2.addAll(listNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new76() /* reduce ANonTerminal$FormalsTail */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			LinkedList<Object> listNode2 = new LinkedList<Object>();
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			listNode2 = (LinkedList) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode3.addAll(listNode1);
			}
			if (listNode2 != null) {
				listNode3.addAll(listNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new77() /* reduce ATerminal$ExpTail */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode2 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			if (listNode1 != null) {
				listNode2.addAll(listNode1);
			}
		}
		nodeList.add(listNode2);
		return nodeList;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	ArrayList<Object> new78() /* reduce ANonTerminal$ExpTail */
	{
		@SuppressWarnings("hiding")
		ArrayList<Object> nodeList = new ArrayList<Object>();

		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList2 = pop();
		@SuppressWarnings("unused")
		ArrayList<Object> nodeArrayList1 = pop();
		LinkedList<Object> listNode3 = new LinkedList<Object>();
		{
			// Block
			LinkedList<Object> listNode1 = new LinkedList<Object>();
			LinkedList<Object> listNode2 = new LinkedList<Object>();
			listNode1 = (LinkedList) nodeArrayList1.get(0);
			listNode2 = (LinkedList) nodeArrayList2.get(0);
			if (listNode1 != null) {
				listNode3.addAll(listNode1);
			}
			if (listNode2 != null) {
				listNode3.addAll(listNode2);
			}
		}
		nodeList.add(listNode3);
		return nodeList;
	}

	private static int[][][] actionTable;
	/*
	 * { {{-1, ERROR, 0}, {18, SHIFT, 1}, }, {{-1, ERROR, 1}, {36, SHIFT, 4}, },
	 * {{-1, ERROR, 2}, {38, ACCEPT, -1}, }, {{-1, REDUCE, 0}, {18, SHIFT, 5},
	 * }, {{-1, ERROR, 4}, {15, SHIFT, 10}, }, {{-1, ERROR, 5}, {36, SHIFT, 11},
	 * }, {{-1, REDUCE, 67}, }, {{-1, REDUCE, 4}, }, {{-1, REDUCE, 5}, }, {{-1,
	 * REDUCE, 1}, {18, SHIFT, 5}, }, {{-1, ERROR, 10}, {27, SHIFT, 13}, },
	 * {{-1, ERROR, 11}, {15, SHIFT, 14}, {20, SHIFT, 15}, }, {{-1, REDUCE, 68},
	 * }, {{-1, ERROR, 13}, {29, SHIFT, 16}, }, {{-1, ERROR, 14}, {16, SHIFT,
	 * 17}, {17, SHIFT, 18}, {23, SHIFT, 19}, {27, SHIFT, 20}, {36, SHIFT, 21},
	 * }, {{-1, ERROR, 15}, {36, SHIFT, 27}, }, {{-1, ERROR, 16}, {34, SHIFT,
	 * 28}, }, {{-1, REDUCE, 6}, }, {{-1, REDUCE, 16}, }, {{-1, REDUCE, 17},
	 * {13, SHIFT, 29}, }, {{-1, ERROR, 20}, {17, SHIFT, 18}, {23, SHIFT, 19},
	 * {36, SHIFT, 21}, }, {{-1, REDUCE, 18}, }, {{-1, REDUCE, 69}, }, {{-1,
	 * ERROR, 23}, {36, SHIFT, 32}, }, {{-1, REDUCE, 71}, }, {{-1, ERROR, 25},
	 * {16, SHIFT, 33}, {17, SHIFT, 18}, {23, SHIFT, 19}, {27, SHIFT, 20}, {36,
	 * SHIFT, 21}, }, {{-1, ERROR, 26}, {16, SHIFT, 36}, {27, SHIFT, 20}, },
	 * {{-1, ERROR, 27}, {15, SHIFT, 38}, }, {{-1, ERROR, 28}, {25, SHIFT, 39},
	 * }, {{-1, ERROR, 29}, {14, SHIFT, 40}, }, {{-1, REDUCE, 15}, }, {{-1,
	 * ERROR, 31}, {36, SHIFT, 41}, }, {{-1, ERROR, 32}, {9, SHIFT, 42}, },
	 * {{-1, REDUCE, 7}, }, {{-1, REDUCE, 70}, }, {{-1, ERROR, 35}, {16, SHIFT,
	 * 43}, {27, SHIFT, 20}, }, {{-1, REDUCE, 8}, }, {{-1, REDUCE, 72}, }, {{-1,
	 * ERROR, 38}, {16, SHIFT, 44}, {17, SHIFT, 18}, {23, SHIFT, 19}, {27,
	 * SHIFT, 20}, {36, SHIFT, 21}, }, {{-1, ERROR, 39}, {11, SHIFT, 47}, },
	 * {{-1, REDUCE, 3}, }, {{-1, ERROR, 41}, {11, SHIFT, 48}, }, {{-1, REDUCE,
	 * 14}, }, {{-1, REDUCE, 9}, }, {{-1, REDUCE, 10}, }, {{-1, ERROR, 45}, {16,
	 * SHIFT, 49}, {17, SHIFT, 18}, {23, SHIFT, 19}, {27, SHIFT, 20}, {36,
	 * SHIFT, 21}, }, {{-1, ERROR, 46}, {16, SHIFT, 51}, {27, SHIFT, 20}, },
	 * {{-1, ERROR, 47}, {30, SHIFT, 52}, }, {{-1, ERROR, 48}, {12, SHIFT, 53},
	 * {17, SHIFT, 18}, {23, SHIFT, 19}, {36, SHIFT, 21}, }, {{-1, REDUCE, 11},
	 * }, {{-1, ERROR, 50}, {16, SHIFT, 57}, {27, SHIFT, 20}, }, {{-1, REDUCE,
	 * 12}, }, {{-1, ERROR, 52}, {13, SHIFT, 29}, }, {{-1, ERROR, 53}, {15,
	 * SHIFT, 59}, }, {{-1, ERROR, 54}, {36, SHIFT, 60}, }, {{-1, ERROR, 55},
	 * {12, SHIFT, 61}, }, {{-1, REDUCE, 27}, {8, SHIFT, 62}, }, {{-1, REDUCE,
	 * 13}, }, {{-1, ERROR, 58}, {36, SHIFT, 65}, }, {{-1, ERROR, 59}, {15,
	 * SHIFT, 66}, {17, SHIFT, 18}, {22, SHIFT, 67}, {23, SHIFT, 19}, {28,
	 * SHIFT, 68}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36, SHIFT, 71}, }, {{-1,
	 * REDUCE, 30}, }, {{-1, ERROR, 61}, {15, SHIFT, 76}, }, {{-1, ERROR, 62},
	 * {17, SHIFT, 18}, {23, SHIFT, 19}, {36, SHIFT, 21}, }, {{-1, REDUCE, 75},
	 * }, {{-1, REDUCE, 28}, {8, SHIFT, 62}, }, {{-1, ERROR, 65}, {12, SHIFT,
	 * 79}, }, {{-1, ERROR, 66}, {15, SHIFT, 66}, {16, SHIFT, 80}, {22, SHIFT,
	 * 67}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36, SHIFT, 81}, }, {{-1, ERROR,
	 * 67}, {11, SHIFT, 83}, }, {{-1, ERROR, 68}, {3, SHIFT, 84}, {11, SHIFT,
	 * 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89},
	 * {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 69}, {11, SHIFT, 100},
	 * }, {{-1, ERROR, 70}, {11, SHIFT, 101}, }, {{-1, REDUCE, 18}, {6, SHIFT,
	 * 102}, {13, SHIFT, 103}, }, {{-1, REDUCE, 73}, }, {{-1, REDUCE, 31}, },
	 * {{-1, ERROR, 74}, {15, SHIFT, 66}, {17, SHIFT, 18}, {22, SHIFT, 67}, {23,
	 * SHIFT, 19}, {28, SHIFT, 104}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36,
	 * SHIFT, 71}, }, {{-1, ERROR, 75}, {15, SHIFT, 66}, {22, SHIFT, 67}, {28,
	 * SHIFT, 106}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36, SHIFT, 81}, }, {{-1,
	 * ERROR, 76}, {15, SHIFT, 66}, {17, SHIFT, 18}, {22, SHIFT, 67}, {23,
	 * SHIFT, 19}, {28, SHIFT, 108}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36,
	 * SHIFT, 71}, }, {{-1, REDUCE, 29}, }, {{-1, REDUCE, 76}, }, {{-1, ERROR,
	 * 79}, {15, SHIFT, 111}, }, {{-1, REDUCE, 37}, }, {{-1, ERROR, 81}, {6,
	 * SHIFT, 102}, {13, SHIFT, 103}, }, {{-1, ERROR, 82}, {15, SHIFT, 66}, {16,
	 * SHIFT, 112}, {22, SHIFT, 67}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36,
	 * SHIFT, 81}, }, {{-1, ERROR, 83}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21,
	 * SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36,
	 * SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 84}, {3, SHIFT, 84}, {11,
	 * SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33,
	 * SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 85}, {3,
	 * SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32,
	 * SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1,
	 * REDUCE, 56}, }, {{-1, ERROR, 87}, {23, SHIFT, 116}, {36, SHIFT, 117}, },
	 * {{-1, REDUCE, 57}, }, {{-1, REDUCE, 55}, }, {{-1, REDUCE, 54}, }, {{-1,
	 * REDUCE, 53}, }, {{-1, ERROR, 92}, {4, SHIFT, 118}, {9, SHIFT, 119}, },
	 * {{-1, REDUCE, 40}, {5, SHIFT, 120}, }, {{-1, REDUCE, 42}, {0, SHIFT,
	 * 121}, {1, SHIFT, 122}, }, {{-1, REDUCE, 45}, {2, SHIFT, 123}, }, {{-1,
	 * REDUCE, 47}, }, {{-1, REDUCE, 49}, {10, SHIFT, 124}, {13, SHIFT, 125}, },
	 * {{-1, REDUCE, 52}, }, {{-1, REDUCE, 51}, }, {{-1, ERROR, 100}, {3, SHIFT,
	 * 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88},
	 * {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 101},
	 * {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32,
	 * SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1,
	 * ERROR, 102}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26,
	 * SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37,
	 * SHIFT, 91}, }, {{-1, ERROR, 103}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21,
	 * SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36,
	 * SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 104}, {3, SHIFT, 84}, {11,
	 * SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33,
	 * SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 105}, {15,
	 * SHIFT, 66}, {22, SHIFT, 67}, {28, SHIFT, 131}, {31, SHIFT, 69}, {35,
	 * SHIFT, 70}, {36, SHIFT, 81}, }, {{-1, ERROR, 106}, {3, SHIFT, 84}, {11,
	 * SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33,
	 * SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, REDUCE, 74}, },
	 * {{-1, ERROR, 108}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26,
	 * SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37,
	 * SHIFT, 91}, }, {{-1, ERROR, 109}, {15, SHIFT, 66}, {17, SHIFT, 18}, {22,
	 * SHIFT, 67}, {23, SHIFT, 19}, {28, SHIFT, 134}, {31, SHIFT, 69}, {35,
	 * SHIFT, 70}, {36, SHIFT, 71}, }, {{-1, ERROR, 110}, {15, SHIFT, 66}, {22,
	 * SHIFT, 67}, {28, SHIFT, 136}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36,
	 * SHIFT, 81}, }, {{-1, ERROR, 111}, {15, SHIFT, 66}, {22, SHIFT, 67}, {31,
	 * SHIFT, 69}, {35, SHIFT, 70}, {36, SHIFT, 81}, }, {{-1, REDUCE, 38}, },
	 * {{-1, ERROR, 113}, {4, SHIFT, 118}, {12, SHIFT, 138}, }, {{-1, REDUCE,
	 * 48}, }, {{-1, ERROR, 115}, {4, SHIFT, 118}, {12, SHIFT, 139}, }, {{-1,
	 * ERROR, 116}, {13, SHIFT, 140}, }, {{-1, ERROR, 117}, {11, SHIFT, 141}, },
	 * {{-1, ERROR, 118}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26,
	 * SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37,
	 * SHIFT, 91}, }, {{-1, ERROR, 119}, {16, SHIFT, 143}, }, {{-1, ERROR, 120},
	 * {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32,
	 * SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1,
	 * ERROR, 121}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26,
	 * SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37,
	 * SHIFT, 91}, }, {{-1, ERROR, 122}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21,
	 * SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36,
	 * SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 123}, {3, SHIFT, 84}, {11,
	 * SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33,
	 * SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 124}, {24,
	 * SHIFT, 148}, {36, SHIFT, 149}, }, {{-1, ERROR, 125}, {3, SHIFT, 84}, {11,
	 * SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33,
	 * SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 126}, {4,
	 * SHIFT, 118}, {12, SHIFT, 151}, }, {{-1, ERROR, 127}, {4, SHIFT, 118},
	 * {12, SHIFT, 152}, }, {{-1, ERROR, 128}, {4, SHIFT, 118}, {9, SHIFT, 153},
	 * }, {{-1, ERROR, 129}, {4, SHIFT, 118}, {14, SHIFT, 154}, }, {{-1, ERROR,
	 * 130}, {4, SHIFT, 118}, {9, SHIFT, 155}, }, {{-1, ERROR, 131}, {3, SHIFT,
	 * 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88},
	 * {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 132},
	 * {4, SHIFT, 118}, {9, SHIFT, 157}, }, {{-1, ERROR, 133}, {4, SHIFT, 118},
	 * {9, SHIFT, 158}, }, {{-1, ERROR, 134}, {3, SHIFT, 84}, {11, SHIFT, 85},
	 * {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36,
	 * SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 135}, {15, SHIFT, 66}, {22,
	 * SHIFT, 67}, {28, SHIFT, 160}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36,
	 * SHIFT, 81}, }, {{-1, ERROR, 136}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21,
	 * SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89}, {36,
	 * SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 137}, {16, SHIFT, 162}, },
	 * {{-1, ERROR, 138}, {15, SHIFT, 66}, {22, SHIFT, 67}, {31, SHIFT, 69},
	 * {35, SHIFT, 70}, {36, SHIFT, 81}, }, {{-1, REDUCE, 60}, }, {{-1, ERROR,
	 * 140}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87},
	 * {32, SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, },
	 * {{-1, ERROR, 141}, {12, SHIFT, 165}, }, {{-1, REDUCE, 39}, {5, SHIFT,
	 * 120}, }, {{-1, REDUCE, 19}, }, {{-1, REDUCE, 41}, {0, SHIFT, 121}, {1,
	 * SHIFT, 122}, }, {{-1, REDUCE, 43}, {2, SHIFT, 123}, }, {{-1, REDUCE, 44},
	 * {2, SHIFT, 123}, }, {{-1, REDUCE, 46}, }, {{-1, REDUCE, 61}, }, {{-1,
	 * ERROR, 149}, {11, SHIFT, 166}, }, {{-1, ERROR, 150}, {4, SHIFT, 118},
	 * {14, SHIFT, 167}, }, {{-1, ERROR, 151}, {9, SHIFT, 168}, }, {{-1, ERROR,
	 * 152}, {15, SHIFT, 66}, {22, SHIFT, 67}, {31, SHIFT, 69}, {35, SHIFT, 70},
	 * {36, SHIFT, 81}, }, {{-1, REDUCE, 35}, }, {{-1, ERROR, 154}, {6, SHIFT,
	 * 170}, }, {{-1, ERROR, 155}, {16, SHIFT, 171}, }, {{-1, ERROR, 156}, {4,
	 * SHIFT, 118}, {9, SHIFT, 172}, }, {{-1, ERROR, 157}, {16, SHIFT, 173}, },
	 * {{-1, ERROR, 158}, {16, SHIFT, 174}, }, {{-1, ERROR, 159}, {4, SHIFT,
	 * 118}, {9, SHIFT, 175}, }, {{-1, ERROR, 160}, {3, SHIFT, 84}, {11, SHIFT,
	 * 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32, SHIFT, 88}, {33, SHIFT, 89},
	 * {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1, ERROR, 161}, {4, SHIFT, 118},
	 * {9, SHIFT, 177}, }, {{-1, ERROR, 162}, {16, SHIFT, 178}, }, {{-1, ERROR,
	 * 163}, {19, SHIFT, 179}, }, {{-1, ERROR, 164}, {4, SHIFT, 118}, {14,
	 * SHIFT, 180}, }, {{-1, REDUCE, 59}, }, {{-1, ERROR, 166}, {3, SHIFT, 84},
	 * {11, SHIFT, 85}, {12, SHIFT, 181}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32,
	 * SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1,
	 * REDUCE, 50}, }, {{-1, REDUCE, 34}, }, {{-1, REDUCE, 33}, }, {{-1, ERROR,
	 * 170}, {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87},
	 * {32, SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, },
	 * {{-1, REDUCE, 21}, }, {{-1, ERROR, 172}, {16, SHIFT, 185}, }, {{-1,
	 * REDUCE, 23}, }, {{-1, REDUCE, 20}, }, {{-1, ERROR, 175}, {16, SHIFT,
	 * 186}, }, {{-1, ERROR, 176}, {4, SHIFT, 118}, {9, SHIFT, 187}, }, {{-1,
	 * ERROR, 177}, {16, SHIFT, 188}, }, {{-1, REDUCE, 2}, }, {{-1, ERROR, 179},
	 * {15, SHIFT, 66}, {22, SHIFT, 67}, {31, SHIFT, 69}, {35, SHIFT, 70}, {36,
	 * SHIFT, 81}, }, {{-1, REDUCE, 58}, }, {{-1, REDUCE, 62}, }, {{-1, REDUCE,
	 * 64}, {4, SHIFT, 118}, {8, SHIFT, 190}, }, {{-1, ERROR, 183}, {12, SHIFT,
	 * 193}, }, {{-1, ERROR, 184}, {4, SHIFT, 118}, {9, SHIFT, 194}, }, {{-1,
	 * REDUCE, 25}, }, {{-1, REDUCE, 22}, }, {{-1, ERROR, 187}, {16, SHIFT,
	 * 195}, }, {{-1, REDUCE, 24}, }, {{-1, REDUCE, 32}, }, {{-1, ERROR, 190},
	 * {3, SHIFT, 84}, {11, SHIFT, 85}, {21, SHIFT, 86}, {26, SHIFT, 87}, {32,
	 * SHIFT, 88}, {33, SHIFT, 89}, {36, SHIFT, 90}, {37, SHIFT, 91}, }, {{-1,
	 * REDUCE, 77}, }, {{-1, REDUCE, 65}, {8, SHIFT, 190}, }, {{-1, REDUCE, 63},
	 * }, {{-1, REDUCE, 36}, }, {{-1, REDUCE, 26}, }, {{-1, REDUCE, 66}, {4,
	 * SHIFT, 118}, }, {{-1, REDUCE, 78}, }, };
	 */
	private static int[][][] gotoTable;
	/*
	 * { {{-1, 2}, }, {{-1, 3}, }, {{-1, 30}, {52, 58}, }, {{-1, 6}, {9, 12}, },
	 * {{-1, 7}, }, {{-1, 8}, }, {{-1, 22}, {25, 34}, {45, 34}, {74, 34}, {109,
	 * 34}, }, {{-1, 23}, {20, 31}, {48, 54}, {62, 54}, }, {{-1, 24}, {26, 37},
	 * {35, 37}, {46, 37}, {50, 37}, }, {{-1, 55}, }, {{-1, 63}, {64, 78}, },
	 * {{-1, 56}, {62, 77}, }, {{-1, 72}, {75, 107}, {82, 107}, {105, 107},
	 * {110, 107}, {111, 137}, {135, 107}, {138, 163}, {152, 169}, {179, 189},
	 * }, {{-1, 73}, }, {{-1, 92}, {83, 113}, {85, 115}, {100, 126}, {101, 127},
	 * {102, 128}, {103, 129}, {104, 130}, {106, 132}, {108, 133}, {125, 150},
	 * {131, 156}, {134, 159}, {136, 161}, {140, 164}, {160, 176}, {166, 182},
	 * {170, 184}, {190, 196}, }, {{-1, 93}, {118, 142}, }, {{-1, 94}, {120,
	 * 144}, }, {{-1, 95}, {121, 145}, {122, 146}, }, {{-1, 96}, {84, 114},
	 * {123, 147}, }, {{-1, 97}, }, {{-1, 98}, }, {{-1, 99}, }, {{-1, 183}, },
	 * {{-1, 191}, {192, 197}, }, {{-1, 9}, }, {{-1, 25}, {38, 45}, {59, 74},
	 * {76, 109}, }, {{-1, 26}, {25, 35}, {38, 46}, {45, 50}, }, {{-1, 75}, {66,
	 * 82}, {74, 105}, {76, 110}, {109, 135}, }, {{-1, 64}, }, {{-1, 192}, }, };
	 */
	private static String[] errorMessages;
	/*
	 * { "expecting: 'class'", "expecting: id", "expecting: EOF",
	 * "expecting: 'class', EOF", "expecting: '{'", "expecting: 'public'",
	 * "expecting: '{', 'extends'", "expecting: 'static'",
	 * "expecting: '}', 'boolean', 'int', 'public', id", "expecting: 'void'",
	 * "expecting: '[', id", "expecting: 'boolean', 'int', id",
	 * "expecting: '{', '}', 'boolean', 'if', 'int', 'public', 'return', 'System.out.println', 'while', id"
	 * , "expecting: '}', 'public'", "expecting: 'main'", "expecting: ']'",
	 * "expecting: ';'", "expecting: '('", "expecting: 'String'",
	 * "expecting: ')', 'boolean', 'int', id", "expecting: '['",
	 * "expecting: ')'", "expecting: ',', ')'",
	 * "expecting: '{', 'boolean', 'if', 'int', 'return', 'System.out.println', 'while', id"
	 * , "expecting: '{', '}', 'if', 'System.out.println', 'while', id",
	 * "expecting: '!', '(', 'false', 'new', 'this', 'true', id, num",
	 * "expecting: '=', '[', id",
	 * "expecting: '{', '}', 'if', 'return', 'System.out.println', 'while', id",
	 * "expecting: '{', '}', 'else', 'if', 'return', 'System.out.println', 'while', id"
	 * , "expecting: '{', 'if', 'return', 'System.out.println', 'while', id",
	 * "expecting: '=', '['",
	 * "expecting: '+', '-', '*', '&&', '<', ',', ';', '.', ')', '[', ']'",
	 * "expecting: 'int', id", "expecting: '&&', ';'",
	 * "expecting: '&&', '<', ',', ';', ')', ']'",
	 * "expecting: '+', '-', '&&', '<', ',', ';', ')', ']'",
	 * "expecting: '+', '-', '*', '&&', '<', ',', ';', ')', ']'",
	 * "expecting: '{', 'if', 'System.out.println', 'while', id",
	 * "expecting: '&&', ')'", "expecting: '}'", "expecting: 'length', id",
	 * "expecting: '&&', ']'", "expecting: '='", "expecting: 'else'",
	 * "expecting: '!', '(', ')', 'false', 'new', 'this', 'true', id, num",
	 * "expecting: '&&', ',', ')'", };
	 */
	private static int[] errors;
	/*
	 * { 0, 1, 2, 3, 4, 1, 3, 3, 3, 3, 5, 6, 3, 7, 8, 1, 9, 3, 1, 10, 11, 1, 12,
	 * 1, 13, 8, 13, 4, 14, 15, 1, 1, 16, 3, 12, 13, 3, 13, 8, 17, 1, 17, 12, 3,
	 * 3, 8, 13, 18, 19, 3, 13, 3, 20, 4, 1, 21, 22, 3, 1, 23, 22, 4, 11, 22,
	 * 22, 21, 24, 17, 25, 17, 17, 26, 27, 28, 23, 29, 23, 22, 22, 4, 28, 30,
	 * 24, 25, 25, 25, 31, 32, 31, 31, 31, 31, 33, 34, 35, 36, 36, 31, 31, 31,
	 * 25, 25, 25, 25, 25, 29, 25, 27, 25, 23, 29, 37, 28, 38, 36, 38, 20, 17,
	 * 25, 39, 25, 25, 25, 25, 40, 25, 38, 38, 33, 41, 33, 25, 33, 33, 25, 29,
	 * 25, 39, 37, 31, 25, 21, 34, 13, 35, 36, 36, 36, 31, 17, 41, 16, 37, 28,
	 * 42, 39, 33, 39, 39, 33, 25, 33, 39, 43, 41, 31, 44, 31, 28, 28, 25, 13,
	 * 39, 13, 13, 39, 33, 39, 3, 37, 31, 31, 45, 21, 33, 13, 13, 39, 13, 28,
	 * 25, 22, 22, 31, 28, 13, 45, 22, };
	 */

	static {
		try {
			DataInputStream s = new DataInputStream(new BufferedInputStream(
					Parser.class.getResourceAsStream("parser.dat")));

			// read actionTable
			int length = s.readInt();
			Parser.actionTable = new int[length][][];
			for (int i = 0; i < Parser.actionTable.length; i++) {
				length = s.readInt();
				Parser.actionTable[i] = new int[length][3];
				for (int j = 0; j < Parser.actionTable[i].length; j++) {
					for (int k = 0; k < 3; k++) {
						Parser.actionTable[i][j][k] = s.readInt();
					}
				}
			}

			// read gotoTable
			length = s.readInt();
			gotoTable = new int[length][][];
			for (int i = 0; i < gotoTable.length; i++) {
				length = s.readInt();
				gotoTable[i] = new int[length][2];
				for (int j = 0; j < gotoTable[i].length; j++) {
					for (int k = 0; k < 2; k++) {
						gotoTable[i][j][k] = s.readInt();
					}
				}
			}

			// read errorMessages
			length = s.readInt();
			errorMessages = new String[length];
			for (int i = 0; i < errorMessages.length; i++) {
				length = s.readInt();
				StringBuffer buffer = new StringBuffer();

				for (int j = 0; j < length; j++) {
					buffer.append(s.readChar());
				}
				errorMessages[i] = buffer.toString();
			}

			// read errors
			length = s.readInt();
			errors = new int[length];
			for (int i = 0; i < errors.length; i++) {
				errors[i] = s.readInt();
			}

			s.close();
		} catch (Exception e) {
			throw new RuntimeException(
					"The file \"parser.dat\" is either missing or corrupted.");
		}
	}
}
